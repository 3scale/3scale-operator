// Package assets Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// assets/monitoring/Sidekiq-grafana-dashboard-1.json.tpl
// assets/monitoring/apicast-grafana-dashboard-1.json.tpl
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _monitoringSidekiqGrafanaDashboard1JsonTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\x4d\x8f\x23\x35\x13\xbe\xcf\xaf\xb0\x7c\x78\xf5\x22\x25\x90\x64\x77\x16\x88\xb4\x87\x99\x91\x06\x2d\x1a\x60\xb5\x83\xb8\xcc\x8c\xa2\xea\x76\xa5\xdb\xc4\xb1\x7b\xed\xea\x4c\x42\x94\xff\x8e\xec\xfe\x72\xc7\x81\xbd\x20\xc1\x25\xe9\x7a\x5c\x2e\xd7\xe7\x63\x1f\xaf\x18\xe3\xa0\xb5\x21\x20\x69\xb4\xe3\x4b\xe6\x21\xc6\xb8\x92\x8e\xf8\x92\x3d\x05\x89\xb5\x68\x58\xc9\x6a\xa9\xe8\x83\xe6\x4b\x36\x9f\x0c\xa8\x00\x02\x67\x6a\x9b\x23\x5f\x32\x3e\x9d\xb2\x1f\x2c\xac\x41\x03\x9b\x4e\x79\xa4\x86\x1a\x32\xe5\x55\xc8\xd6\x18\xe1\xa5\x14\x17\x50\x99\x1b\x7d\x67\x94\xb1\xde\xa6\x2d\x32\xf8\xff\x6c\xc2\x16\xf3\xf9\x84\x2d\xae\xaf\x27\x6c\xfe\x55\x6c\x5a\xc3\x36\x9c\x7d\x33\x84\xc3\xfe\xc7\x6e\x14\x5a\x72\xb1\x1e\x1d\xaa\xa0\x27\xc0\x95\x99\x01\x2b\x78\xbb\x76\x0a\xff\x2f\x57\x8c\x9d\xbc\x3a\x47\x21\xe9\xcc\x5b\x5e\x68\xa4\x0f\x82\x2f\x99\xae\x95\x6a\x10\x0b\x55\xf9\xab\x31\x8a\x64\xc5\x97\x6c\x16\x40\xe9\x55\xde\x86\x4f\x25\xf5\xc6\xe7\xf5\xe9\x25\x88\x15\x68\x54\xae\xcf\x6c\x97\x57\x0e\x4a\x82\x0b\xb1\x86\x22\x9c\x3a\x87\x79\x06\x01\x59\x83\x72\x7d\x6a\x82\xef\x0f\xa8\x0b\x2a\x7d\x19\x66\x23\x1c\x53\xf5\xb5\x54\x2a\xae\x17\x2f\xac\x14\x1f\xcd\x50\xee\xa6\x06\x7c\xc9\xbe\x8f\x12\xf5\xea\xb7\x2c\x22\x60\xdf\xc5\xd7\xca\x07\x2f\x77\xc9\xeb\x6d\x87\xd8\xfb\x6d\x5c\x61\x81\x5a\x8c\x4f\x82\x5d\x71\xee\x23\x63\x3c\xaf\xad\x45\x4d\x17\x56\xb6\xb0\xbf\x84\x4a\x7d\x01\x75\xa5\x79\x4d\x3b\x89\x0c\x81\xba\xa0\xbd\x03\x55\x0f\x09\x4b\x62\x51\x52\x87\xd5\xd8\x5a\x00\x5f\xa5\x68\x72\x1f\xa3\x51\x9d\x9b\x8e\xac\x95\xfa\x68\xa4\xa6\x9f\x4c\xe8\xee\x00\xf4\xad\xc8\x4d\xd5\xcf\xdc\x70\x62\x85\x36\x47\x4d\x50\x60\x52\xc5\xca\x9b\xb2\x20\x64\xed\x46\x19\x0e\x78\x5a\x74\x8b\x5a\xa0\xc5\x30\x3b\x6b\x65\x68\x38\xd8\xa1\x95\xe8\x7e\xd9\xa1\xb5\x52\xe0\x99\xd3\xae\x82\x1c\x2f\xf5\x96\x23\xc8\x37\xc9\x29\x8e\xb0\xaa\x50\x3c\x48\x9d\x3a\x4c\x60\x0b\x24\x17\xd1\x48\x4c\x24\x7e\xc2\xf6\x55\x70\xcf\x49\x81\x1b\xf9\x79\xf5\xbb\xc9\x56\xb6\xd6\x24\xb7\xb8\x72\x98\x1b\x2d\xdc\x2a\x37\xb5\xa6\xe3\xe7\x1a\x6b\x7c\xff\xcc\x33\xa9\x94\xd4\xc5\x33\x9f\xf8\x71\x0f\xbe\xbe\x7f\xe6\xc7\x23\xfb\xfa\xe7\x4e\x66\xa7\xd3\x33\x3f\x45\x13\xef\x07\xc0\xd8\x2d\xf8\xce\xe2\xad\x6d\x9f\x80\xb1\x8a\xd4\x84\x76\x07\xea\x1e\x72\x0a\x84\x33\x1f\x2d\x37\x6d\x7c\xdf\xdb\xb9\x6d\x1c\x19\xdb\xb0\xb8\x0e\xe4\xc0\x6f\x78\x0f\x9f\x26\xff\x54\xec\xb9\x95\x24\x73\x50\xff\x7e\xf0\x77\xad\x27\x7f\x11\xfd\x6d\x14\x7d\xfb\x35\xf4\x17\x95\x16\x5d\x69\x94\x38\xeb\x3b\xef\xdb\xbd\x35\xdb\x88\x5b\x7b\xfc\x13\x16\xed\xa4\x9c\x6d\x78\x2c\xe5\x9a\xd2\x1d\x14\x48\x9b\x3f\x36\xa9\x65\x3f\x9a\x8c\x7d\x6a\x52\xcb\x1e\x9b\xd4\xb2\x3b\x9f\xda\x61\x24\xa8\x27\xf0\x63\x4c\x25\x60\x51\xa4\x64\xe2\x8c\xa5\x33\x2a\x0c\x3c\xb2\xea\xae\x16\xa9\x85\xdc\x49\x51\x83\xe2\x09\xa5\x74\x3a\xe1\xde\x18\x1c\xd8\xc3\x5e\x9e\xf1\x71\x56\xe7\x9b\x66\x7c\xe2\xf0\x3c\xf1\xb5\x74\xe2\x03\xba\x70\x03\x9e\x69\x5f\x26\xc4\x9e\xf8\x9e\x5e\x12\x17\x0f\xb0\xc7\xbf\x99\xda\xa1\x9f\x5c\xe9\x33\x31\x6e\x15\xc8\x50\x25\x4e\xf8\x05\x53\xdc\x82\xc3\xa4\xb7\x1a\x6e\x4f\xd4\x1b\x72\x4f\xe0\x28\x98\x2f\x4e\xd8\x7f\xce\xcf\x64\x16\x0e\x69\xd1\x41\xc9\xe2\xd2\xb5\x16\xf0\x07\xdc\xf5\x4e\x8f\x1e\x2d\xfe\xb7\x79\x5f\xb8\xbc\xc4\x2d\xfc\x86\xd6\x49\x13\xde\x68\xdf\x35\x30\x1d\x54\xfb\xea\xb1\x9b\x90\x09\x4e\x50\x44\xef\x12\xc2\x6d\xa5\x80\x3c\xa5\x25\x6f\xc0\xe1\x49\x14\x3a\xae\x5f\x5f\x37\xe3\xca\xb5\x79\x9d\xbe\xeb\x7a\x99\x93\x69\x31\x3e\xda\x56\xc9\x7c\x13\x2e\xa3\x76\xb3\xc5\xb5\x27\x82\x55\x47\x3d\x71\xc3\xf1\xeb\x81\x9f\xf8\x7c\x16\x09\x6f\x62\x61\xbe\x1d\xbe\xaf\xa3\xef\x79\x2c\xbc\x99\xc5\x2b\xd1\xc4\x2d\xa2\xef\x79\xfb\x08\x7c\xe9\x62\xf0\x44\x39\xdc\xcf\x4f\x5f\x3c\x25\x36\xfc\x2e\x36\x1c\x9f\xb2\x78\x1b\x0b\x62\xf8\xfe\x56\xc4\xfe\x76\xbe\x8c\xd2\xf7\x87\x09\x17\x2c\x6f\x6b\xd7\x51\xdc\x39\xf9\x7f\xd3\x72\x5e\xa3\xb6\x1b\xda\xe0\xea\x74\xf5\x67\x00\x00\x00\xff\xff\x24\xa7\x41\x28\xed\x0b\x00\x00")

func monitoringSidekiqGrafanaDashboard1JsonTplBytes() ([]byte, error) {
	return bindataRead(
		_monitoringSidekiqGrafanaDashboard1JsonTpl,
		"monitoring/Sidekiq-grafana-dashboard-1.json.tpl",
	)
}

func monitoringSidekiqGrafanaDashboard1JsonTpl() (*asset, error) {
	bytes, err := monitoringSidekiqGrafanaDashboard1JsonTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "monitoring/Sidekiq-grafana-dashboard-1.json.tpl", size: 3053, mode: os.FileMode(420), modTime: time.Unix(1583856109, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _monitoringApicastGrafanaDashboard1JsonTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\x5d\x6f\x22\x37\x14\x7d\xcf\xaf\xb0\xfc\x50\xb5\x12\xb4\xc0\x36\xdb\x16\x29\x0f\x69\xd4\x6c\x23\xa5\x24\xea\x46\x55\xa5\x10\xa1\xcb\xf8\x32\xe3\x62\xec\x91\x7d\x87\x40\x11\xff\xbd\xb2\xe7\xcb\xc3\x8c\xba\xcf\xfb\x02\xf6\xf1\x1d\xfb\x7e\x9c\x7b\xec\xd3\x15\x63\x1c\xb4\x36\x04\x24\x8d\x76\x7c\xce\x3c\xc4\x18\x57\xd2\x11\x9f\xb3\xd7\x30\x63\x15\x1a\x56\xd6\x85\x54\xf4\xa0\xf9\x9c\x4d\x47\x2d\x2a\x80\xc0\x99\xc2\x26\xc8\xe7\x8c\x8f\xc7\xec\x93\x85\x0d\x68\x60\xe3\x31\x8f\xcc\x50\xc3\x5a\x79\x13\xb2\x05\x46\x78\x26\xc5\x00\x2a\x13\xa3\xef\x8c\x32\xd6\xef\x69\xd3\x35\x7c\x3b\x19\xb1\xd9\x74\x3a\x62\xb3\xeb\xeb\x11\x9b\x7e\x17\x6f\xad\x61\x17\xce\xbe\x6d\xc3\x61\xdf\xb0\x5b\x85\x96\x5c\x6c\x47\xc7\x3c\xd8\x09\x70\xd9\xda\x80\x15\xbc\x5a\x3b\x87\xff\xb7\x2b\xc6\xce\xde\x9c\xa3\x90\x74\xe1\x2d\x4f\x35\xd2\x83\xe0\x73\xa6\x0b\xa5\x4a\xc4\x42\x9e\xbd\x18\xa3\x48\xe6\x7c\xce\x26\x01\x94\xde\x64\x16\x86\x4a\xea\xad\xcf\xeb\xeb\x5b\x98\xe6\xa0\x51\xb9\x26\xb3\x75\x5e\x39\x28\x09\x2e\xc4\x1a\x8a\x70\xae\x1d\xe6\x6b\x08\xc8\x06\x94\x6b\x52\x13\x7c\x7f\x44\x9d\x52\xe6\xcb\x30\xe9\xe0\xd8\x37\xdf\x48\xa5\xe2\x7a\xf1\xd4\x4a\xf1\x6c\xda\x72\x97\x35\xe0\x73\xf6\x4b\x94\xa8\x77\xff\xc9\x2c\x02\x0e\x75\x7c\xd5\xfc\xe8\xe7\x75\xf2\x9a\xbd\xdb\xd8\x4b\x22\x61\x8a\x5a\x74\x4f\x82\x7d\x7a\xe9\x23\x63\x3c\x29\xac\x45\x4d\x03\x2b\x3b\x38\x0c\xa1\x52\x0f\xa0\x2e\x33\xef\x7d\x26\x91\x21\x50\x03\xd6\x7b\x50\x45\x9b\xb0\x5e\x2c\x4a\xea\xb0\x1a\xef\x16\xc0\x77\x29\xca\xdc\xc7\x68\x54\xe7\x92\x91\x85\x52\xcf\x46\x6a\xfa\xc3\x04\x76\x07\xa0\xa1\x22\x37\x79\xd3\x73\xed\x89\x39\xda\x04\x35\x41\x8a\xbd\x2a\xe6\x7e\x2b\x0b\x42\x16\xae\x93\xe1\x80\xf7\x8b\x6e\x51\x0b\xb4\x18\x7a\x67\xa3\x0c\xb5\x07\x3b\xb4\x12\xdd\xd3\x1e\xad\x95\x02\x2f\x9c\x76\x39\x24\x38\xc4\x2d\x47\x90\x6c\x7b\xa7\x38\xc2\x3c\x47\xf1\x28\x75\xdf\x61\x02\x9b\x22\xb9\x48\x46\x62\x21\xf1\x1d\x76\xc8\x83\x7b\x3a\x95\xfa\xb0\xca\x88\xf2\x55\x62\xb4\xc6\x24\x24\xe6\xf4\x8f\x59\xdf\x2c\x39\xe4\x32\x01\x47\x63\x47\x90\x4a\x9d\x8e\x77\x46\x4b\x32\x56\xea\x74\xc9\x47\x8e\x80\xf0\x66\x59\xd6\x77\xc9\x47\x5e\x04\x42\x04\x37\x4b\x7e\x3a\xb1\xef\x17\xf5\x9c\x9d\xcf\x4b\x7e\x8e\x74\xc0\xb7\x85\xb1\x3b\xf0\x7c\xe3\x24\x77\xb8\x2a\xd3\xd2\x35\x91\x9a\xd0\xee\x03\x75\xf8\xf0\xca\x3d\x24\x14\x04\x6a\xda\x59\x2e\x69\x7f\xdf\x9c\xb0\xf8\xf4\xb0\xf8\x7b\xf5\xfb\xcb\xcb\xf3\xea\xee\x69\xb1\xf8\xed\xee\xe5\xe1\x69\xf1\xb9\xbb\xa5\xc5\x4d\xd0\x16\x7e\xcb\x1b\xf8\x5c\x8d\xda\x02\x51\x66\xd1\x65\x46\x89\x8b\xc2\xf9\x18\xee\xad\xd9\x45\xe2\xd4\xe0\x7f\x62\x5a\x51\xed\xe2\x83\xcf\x99\xdc\x50\xff\x0b\x0a\xaa\xf7\x25\xa7\x39\x35\xb2\x77\x8a\x1b\x10\x2c\x8a\x7e\x0b\x3a\x63\xe9\x42\x40\x42\xf7\xad\x6a\x41\x96\x5a\xc8\xbd\x14\x05\x28\xde\x6b\xc4\xda\x26\xa8\x6d\xeb\xc0\x01\x0e\xf2\x42\xc5\xd6\x45\xb2\x2d\x49\x17\xc7\xe4\xe5\xa2\x6a\x42\x1f\xf6\xc0\xbd\x71\x61\x3d\x2c\x23\x8d\x5c\xbc\xbe\xf5\x5c\x3c\xc2\x01\xff\x87\xeb\x2d\xd9\x5c\xe6\x33\xd1\x65\x0b\xac\x51\xf5\x9c\xf0\x0b\x26\xfd\x15\x1c\xf6\xe8\x55\x2a\x62\xcf\xbc\x94\xc4\x1e\x1c\x05\xd3\x12\x6b\xf4\x95\xf8\xd9\x6b\x80\x63\xbf\xe8\xa0\x64\x3a\x74\x19\x04\xfc\x11\xf7\x8d\xd3\x9d\xab\xde\xff\x96\xb7\xb2\x4b\x32\xdc\xc1\x5f\x68\x9d\x34\xe1\x65\xf3\x73\x09\xd3\x51\x55\x6f\x05\xbb\x0d\x99\xe0\x04\x69\x74\x9b\x13\xee\x72\x05\x24\x75\xda\x7f\x39\xb5\x0f\x89\xc0\xb8\x66\x7d\x53\xf6\x28\xd7\xe6\x7d\xfc\xb1\xe6\x32\x27\x53\x61\xbc\xf3\x59\x2e\x93\x6d\x90\xf0\xea\x63\x8b\x1b\xdf\xfd\xab\x5a\x7d\x62\xc2\xf1\xeb\x56\xbc\xf8\x74\x12\x4d\x3e\xc4\x93\xe9\xae\x1d\x5f\x47\xe3\x69\x3c\xf9\x30\x89\x57\xa2\x8e\x9b\x45\xe3\x69\xf5\x74\x7a\xab\x63\xf0\x2a\xda\xde\x6a\xaf\x5f\x3c\x25\xde\xf8\x63\xbc\x71\x7c\xca\xec\xc7\x78\x22\xda\xf1\x4f\x22\xf6\xb7\xf6\xa5\x93\xbe\x7f\x4d\xb8\x96\x78\x55\xbb\x5a\xd7\x2e\x6f\x86\x1f\x6e\xcb\x3b\xa6\x34\xdb\xb7\x34\xb8\x3a\x5f\xfd\x17\x00\x00\xff\xff\x3f\x81\x37\x92\x23\x0b\x00\x00")

func monitoringApicastGrafanaDashboard1JsonTplBytes() ([]byte, error) {
	return bindataRead(
		_monitoringApicastGrafanaDashboard1JsonTpl,
		"monitoring/apicast-grafana-dashboard-1.json.tpl",
	)
}

func monitoringApicastGrafanaDashboard1JsonTpl() (*asset, error) {
	bytes, err := monitoringApicastGrafanaDashboard1JsonTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "monitoring/apicast-grafana-dashboard-1.json.tpl", size: 2851, mode: os.FileMode(420), modTime: time.Unix(1583855874, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"monitoring/Sidekiq-grafana-dashboard-1.json.tpl": monitoringSidekiqGrafanaDashboard1JsonTpl,
	"monitoring/apicast-grafana-dashboard-1.json.tpl": monitoringApicastGrafanaDashboard1JsonTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"monitoring": &bintree{nil, map[string]*bintree{
		"Sidekiq-grafana-dashboard-1.json.tpl": &bintree{monitoringSidekiqGrafanaDashboard1JsonTpl, map[string]*bintree{}},
		"apicast-grafana-dashboard-1.json.tpl": &bintree{monitoringApicastGrafanaDashboard1JsonTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
