// Package assets Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// assets/monitoring/apicast-grafana-dashboard-1.json
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _monitoringApicastGrafanaDashboard1Json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\x4d\x6f\xe3\x36\x10\xbd\xe7\x57\x10\x3c\x14\x2d\x60\x03\xb6\xb7\xd9\xb6\x06\xf6\x90\x06\xcd\x36\x40\xd6\x09\xba\x41\x5b\x34\x09\x8c\xb1\x38\x96\x58\x53\xa4\x40\x8e\x1c\xbb\x81\xff\x7b\x41\xea\x8b\xb2\x84\xe6\xdc\x8b\x4d\x3e\x8e\xc8\xf9\x78\xf3\xc8\xb7\x0b\xc6\x38\x68\x6d\x08\x48\x1a\xed\xf8\x92\x79\x88\x31\xae\xa4\x23\xbe\x64\x4f\x61\xc6\x6a\x34\xac\x6c\x4a\xa9\xe8\x56\xf3\x25\x9b\x4f\x3a\x54\x00\x81\x33\xa5\x4d\x90\x2f\x19\x9f\x4e\xd9\x67\x0b\x5b\xd0\xc0\xa6\x53\x1e\x99\xa1\x86\x8d\xf2\x26\x64\x4b\x8c\xf0\x4c\x8a\x11\x54\x26\x46\x5f\x1b\x65\xac\xdf\xd3\xa6\x1b\xf8\x76\x36\x61\x8b\xf9\x7c\xc2\x16\x97\x97\x13\x36\xff\x2e\xde\x5a\x43\x1e\xce\xbe\xea\xc2\x61\xdf\xb0\x2b\x85\x96\x5c\x6c\x47\xc7\x22\xd8\x09\x70\xd9\xc6\x80\x15\xbc\x5e\x3b\x85\xff\x97\x0b\xc6\x4e\xde\x9c\xa3\x90\x74\xe6\x2d\x4f\x35\xd2\xad\xe0\x4b\xa6\x4b\xa5\x2a\xc4\x42\x91\x3d\x1a\xa3\x48\x16\x7c\xc9\x66\x01\x94\xde\x64\x11\x86\x4a\xea\x9d\xcf\xeb\xd3\x4b\x98\x16\xa0\x51\xb9\x36\xb3\x4d\x5e\x39\x28\x09\x2e\xc4\x1a\x8a\x70\x6a\x1c\xe6\x1b\x08\xc8\x16\x94\x6b\x53\x13\x7c\xbf\x43\x9d\x52\xe6\xcb\x30\xeb\xe1\x38\x34\xdf\x4a\xa5\xe2\x7a\xf1\xd4\x4a\xf1\x60\xba\x72\x57\x35\xe0\x4b\xf6\x53\x94\xa8\x57\xff\xc9\x22\x02\x0e\x4d\x7c\xf5\xfc\xe8\xe7\x4d\xf2\xda\xbd\xbb\xd8\x2b\x22\x61\x8a\x5a\xf4\x4f\x82\x7d\x7a\xee\x23\x63\x3c\x29\xad\x45\x4d\x23\x2b\x39\x1c\xc6\x50\xa9\x47\x50\x97\x99\xd7\x21\x93\xc8\x10\xa8\x11\xeb\x3d\xa8\xb2\x4b\xd8\x20\x16\x25\x75\x58\x8d\x77\x0b\xe0\xab\x14\x55\xee\x63\x34\xaa\x73\xc5\xc8\x52\xa9\x07\x23\x35\x7d\x31\x81\xdd\x01\x68\xa9\xc8\x4d\xd1\xf6\x5c\x77\x62\x81\x36\x41\x4d\x90\xe2\xa0\x8a\x85\xdf\xca\x82\x90\xa5\xeb\x65\x38\xe0\xc3\xa2\x5b\xd4\x02\x2d\x86\xde\xd9\x2a\x43\xdd\xc1\x0e\xad\x44\x77\xbf\x47\x6b\xa5\xc0\x33\xa7\x5d\x01\x09\x8e\x71\xcb\x11\x24\xbb\xc1\x29\x8e\xb0\x28\x50\xdc\x49\x3d\x74\x98\xc0\xa6\x48\x2e\x92\x91\x58\x48\x7c\x87\x1d\x8a\xe0\x9e\x4e\xa5\x3e\xac\x33\xa2\x62\x9d\x18\xad\x31\x09\x89\x79\xfb\xdb\x6c\x3e\x3d\x73\x28\x64\x02\x8e\xa6\x8e\x20\x95\x3a\x9d\xe6\x46\x4b\x32\x56\xea\xf4\x99\x4f\x98\x23\x20\xfc\xf4\x5c\x15\xf8\x99\x9f\xa2\x4e\xf7\xc4\x37\x36\x07\xcf\x28\x4e\x32\xc7\x75\x15\x78\xdf\x44\x6a\x42\xbb\x0f\xe4\xe0\xe3\x2b\x37\x90\x50\x90\xa0\x79\x6f\xb9\x22\xf6\x4d\x7b\xc2\xea\xf3\xed\xea\xcf\xf5\xaf\x8f\x8f\x0f\xeb\xeb\xfb\xd5\xea\x97\xeb\xc7\xdb\xfb\xd5\xd7\xfe\x96\x16\xb7\x41\x3d\xf8\x15\x6f\xe1\x53\x3d\xea\x4a\x40\x99\x45\x97\x19\x25\xce\x4a\xe3\x63\xb8\xb1\x26\x8f\xe4\xa7\xc5\x7f\xc3\xb4\x26\xd3\xd9\x07\x5f\x33\xb9\xa5\xe1\x17\x14\x74\xed\x3d\xa7\x39\xb5\xc2\xf6\x16\xb7\x18\x58\x14\xc3\x26\x73\xc6\xd2\x99\x44\x84\xfe\x5a\x37\x92\x2b\xb5\x90\x7b\x29\x4a\x50\x7c\xd0\x6a\x8d\x4d\xd0\xd3\xce\x81\x03\x1c\xe4\x99\x4e\x6d\xca\x64\x57\xd1\x2a\x8e\xc9\x0b\x42\xdd\x66\x3e\xec\x91\x9b\xe1\xcc\x7a\x5c\x28\x5a\x41\x78\x7a\x19\xb8\x78\x84\x03\xfe\x07\x9b\x3b\xb2\xb9\xcc\x67\xa2\xcf\x16\xd8\xa0\x1a\x38\xe1\x17\x4c\xfa\x33\x38\x1c\xd0\xab\xd2\xbc\x81\x79\x25\x7a\x03\x38\x0a\xa6\x23\xd6\xe4\x7f\xe2\xe7\xa0\x01\x8e\xc3\xa2\x83\x92\xe9\x98\xdc\x07\xfc\x0e\xf7\xad\xd3\xbd\xcb\xdc\xff\x56\xf7\xae\x4b\x32\xcc\xe1\x77\xb4\x4e\x9a\xf0\x76\xf9\xb1\x82\xe9\xa8\xea\xd7\x80\xdd\x85\x4c\x70\x82\x34\xba\xaf\x09\xf3\x42\x01\x49\x9d\x0e\xdf\x46\xdd\x53\x21\x30\xae\x5d\xdf\x56\x3d\xca\xb5\x79\x9d\x7e\x6c\xb8\xcc\xc9\xd4\x18\xef\x7d\x56\xc8\x64\x17\x44\xba\xfe\xd8\xe2\xd6\x77\xff\xba\x51\x9f\x98\x70\xfc\xb2\x13\x2f\x3e\x9f\x45\x93\x0f\xf1\x64\x9e\x77\xe3\xcb\x68\x3c\x8f\x27\x1f\x66\xf1\x4a\xd4\x71\x8b\x68\x3c\xaf\x1f\x47\x2f\x4d\x0c\x5e\x45\xbb\x7b\xeb\xe9\xdd\x53\xe2\x8d\x3f\xc6\x1b\xc7\xa7\x2c\xbe\x8f\x27\xa2\x1b\xff\x20\x62\x7f\x1b\x5f\x7a\xe9\xfb\xc7\x84\x8b\x87\xd7\xb5\x6b\x74\xed\xaa\xba\x34\x16\x15\x5c\x86\x37\x09\xdf\x67\xd3\x3f\xee\xbe\x94\x7f\xd5\x85\xde\x77\x64\xb8\x38\x5d\xfc\x1b\x00\x00\xff\xff\xb2\xe3\xda\xfe\x0b\x0b\x00\x00")

func monitoringApicastGrafanaDashboard1JsonBytes() ([]byte, error) {
	return bindataRead(
		_monitoringApicastGrafanaDashboard1Json,
		"monitoring/apicast-grafana-dashboard-1.json",
	)
}

func monitoringApicastGrafanaDashboard1Json() (*asset, error) {
	bytes, err := monitoringApicastGrafanaDashboard1JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "monitoring/apicast-grafana-dashboard-1.json", size: 2827, mode: os.FileMode(420), modTime: time.Unix(1583834216, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"monitoring/apicast-grafana-dashboard-1.json": monitoringApicastGrafanaDashboard1Json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"monitoring": &bintree{nil, map[string]*bintree{
		"apicast-grafana-dashboard-1.json": &bintree{monitoringApicastGrafanaDashboard1Json, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
