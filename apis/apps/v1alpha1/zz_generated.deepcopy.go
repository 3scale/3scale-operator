//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2020 Red Hat.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/3scale/3scale-operator/pkg/apispkg/common"
	"k8s.io/api/core/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *APIManager) DeepCopyInto(out *APIManager) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new APIManager.
func (in *APIManager) DeepCopy() *APIManager {
	if in == nil {
		return nil
	}
	out := new(APIManager)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *APIManager) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *APIManagerBackup) DeepCopyInto(out *APIManagerBackup) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new APIManagerBackup.
func (in *APIManagerBackup) DeepCopy() *APIManagerBackup {
	if in == nil {
		return nil
	}
	out := new(APIManagerBackup)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *APIManagerBackup) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *APIManagerBackupDestination) DeepCopyInto(out *APIManagerBackupDestination) {
	*out = *in
	if in.PersistentVolumeClaim != nil {
		in, out := &in.PersistentVolumeClaim, &out.PersistentVolumeClaim
		*out = new(PersistentVolumeClaimBackupDestination)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new APIManagerBackupDestination.
func (in *APIManagerBackupDestination) DeepCopy() *APIManagerBackupDestination {
	if in == nil {
		return nil
	}
	out := new(APIManagerBackupDestination)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *APIManagerBackupList) DeepCopyInto(out *APIManagerBackupList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]APIManagerBackup, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new APIManagerBackupList.
func (in *APIManagerBackupList) DeepCopy() *APIManagerBackupList {
	if in == nil {
		return nil
	}
	out := new(APIManagerBackupList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *APIManagerBackupList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *APIManagerBackupSpec) DeepCopyInto(out *APIManagerBackupSpec) {
	*out = *in
	in.BackupDestination.DeepCopyInto(&out.BackupDestination)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new APIManagerBackupSpec.
func (in *APIManagerBackupSpec) DeepCopy() *APIManagerBackupSpec {
	if in == nil {
		return nil
	}
	out := new(APIManagerBackupSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *APIManagerBackupStatus) DeepCopyInto(out *APIManagerBackupStatus) {
	*out = *in
	if in.Completed != nil {
		in, out := &in.Completed, &out.Completed
		*out = new(bool)
		**out = **in
	}
	if in.MainStepsCompleted != nil {
		in, out := &in.MainStepsCompleted, &out.MainStepsCompleted
		*out = new(bool)
		**out = **in
	}
	if in.APIManagerSourceName != nil {
		in, out := &in.APIManagerSourceName, &out.APIManagerSourceName
		*out = new(string)
		**out = **in
	}
	if in.StartTime != nil {
		in, out := &in.StartTime, &out.StartTime
		*out = (*in).DeepCopy()
	}
	if in.CompletionTime != nil {
		in, out := &in.CompletionTime, &out.CompletionTime
		*out = (*in).DeepCopy()
	}
	if in.BackupPersistentVolumeClaimName != nil {
		in, out := &in.BackupPersistentVolumeClaimName, &out.BackupPersistentVolumeClaimName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new APIManagerBackupStatus.
func (in *APIManagerBackupStatus) DeepCopy() *APIManagerBackupStatus {
	if in == nil {
		return nil
	}
	out := new(APIManagerBackupStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *APIManagerCommonSpec) DeepCopyInto(out *APIManagerCommonSpec) {
	*out = *in
	if in.AppLabel != nil {
		in, out := &in.AppLabel, &out.AppLabel
		*out = new(string)
		**out = **in
	}
	if in.TenantName != nil {
		in, out := &in.TenantName, &out.TenantName
		*out = new(string)
		**out = **in
	}
	if in.ResourceRequirementsEnabled != nil {
		in, out := &in.ResourceRequirementsEnabled, &out.ResourceRequirementsEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ImagePullSecrets != nil {
		in, out := &in.ImagePullSecrets, &out.ImagePullSecrets
		*out = make([]v1.LocalObjectReference, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new APIManagerCommonSpec.
func (in *APIManagerCommonSpec) DeepCopy() *APIManagerCommonSpec {
	if in == nil {
		return nil
	}
	out := new(APIManagerCommonSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *APIManagerList) DeepCopyInto(out *APIManagerList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]APIManager, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new APIManagerList.
func (in *APIManagerList) DeepCopy() *APIManagerList {
	if in == nil {
		return nil
	}
	out := new(APIManagerList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *APIManagerList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *APIManagerRestore) DeepCopyInto(out *APIManagerRestore) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new APIManagerRestore.
func (in *APIManagerRestore) DeepCopy() *APIManagerRestore {
	if in == nil {
		return nil
	}
	out := new(APIManagerRestore)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *APIManagerRestore) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *APIManagerRestoreList) DeepCopyInto(out *APIManagerRestoreList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]APIManagerRestore, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new APIManagerRestoreList.
func (in *APIManagerRestoreList) DeepCopy() *APIManagerRestoreList {
	if in == nil {
		return nil
	}
	out := new(APIManagerRestoreList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *APIManagerRestoreList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *APIManagerRestoreSource) DeepCopyInto(out *APIManagerRestoreSource) {
	*out = *in
	if in.PersistentVolumeClaim != nil {
		in, out := &in.PersistentVolumeClaim, &out.PersistentVolumeClaim
		*out = new(PersistentVolumeClaimRestoreSource)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new APIManagerRestoreSource.
func (in *APIManagerRestoreSource) DeepCopy() *APIManagerRestoreSource {
	if in == nil {
		return nil
	}
	out := new(APIManagerRestoreSource)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *APIManagerRestoreSpec) DeepCopyInto(out *APIManagerRestoreSpec) {
	*out = *in
	in.RestoreSource.DeepCopyInto(&out.RestoreSource)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new APIManagerRestoreSpec.
func (in *APIManagerRestoreSpec) DeepCopy() *APIManagerRestoreSpec {
	if in == nil {
		return nil
	}
	out := new(APIManagerRestoreSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *APIManagerRestoreStatus) DeepCopyInto(out *APIManagerRestoreStatus) {
	*out = *in
	if in.APIManagerToRestoreRef != nil {
		in, out := &in.APIManagerToRestoreRef, &out.APIManagerToRestoreRef
		*out = new(v1.LocalObjectReference)
		**out = **in
	}
	if in.Completed != nil {
		in, out := &in.Completed, &out.Completed
		*out = new(bool)
		**out = **in
	}
	if in.MainStepsCompleted != nil {
		in, out := &in.MainStepsCompleted, &out.MainStepsCompleted
		*out = new(bool)
		**out = **in
	}
	if in.StartTime != nil {
		in, out := &in.StartTime, &out.StartTime
		*out = (*in).DeepCopy()
	}
	if in.CompletionTime != nil {
		in, out := &in.CompletionTime, &out.CompletionTime
		*out = (*in).DeepCopy()
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new APIManagerRestoreStatus.
func (in *APIManagerRestoreStatus) DeepCopy() *APIManagerRestoreStatus {
	if in == nil {
		return nil
	}
	out := new(APIManagerRestoreStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *APIManagerSpec) DeepCopyInto(out *APIManagerSpec) {
	*out = *in
	in.APIManagerCommonSpec.DeepCopyInto(&out.APIManagerCommonSpec)
	if in.Apicast != nil {
		in, out := &in.Apicast, &out.Apicast
		*out = new(ApicastSpec)
		(*in).DeepCopyInto(*out)
	}
	if in.Backend != nil {
		in, out := &in.Backend, &out.Backend
		*out = new(BackendSpec)
		(*in).DeepCopyInto(*out)
	}
	if in.System != nil {
		in, out := &in.System, &out.System
		*out = new(SystemSpec)
		(*in).DeepCopyInto(*out)
	}
	if in.Zync != nil {
		in, out := &in.Zync, &out.Zync
		*out = new(ZyncSpec)
		(*in).DeepCopyInto(*out)
	}
	if in.HighAvailability != nil {
		in, out := &in.HighAvailability, &out.HighAvailability
		*out = new(HighAvailabilitySpec)
		(*in).DeepCopyInto(*out)
	}
	if in.ExternalComponents != nil {
		in, out := &in.ExternalComponents, &out.ExternalComponents
		*out = new(ExternalComponentsSpec)
		(*in).DeepCopyInto(*out)
	}
	if in.PodDisruptionBudget != nil {
		in, out := &in.PodDisruptionBudget, &out.PodDisruptionBudget
		*out = new(PodDisruptionBudgetSpec)
		**out = **in
	}
	if in.Monitoring != nil {
		in, out := &in.Monitoring, &out.Monitoring
		*out = new(MonitoringSpec)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new APIManagerSpec.
func (in *APIManagerSpec) DeepCopy() *APIManagerSpec {
	if in == nil {
		return nil
	}
	out := new(APIManagerSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *APIManagerStatus) DeepCopyInto(out *APIManagerStatus) {
	*out = *in
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make(common.Conditions, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	in.Deployments.DeepCopyInto(&out.Deployments)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new APIManagerStatus.
func (in *APIManagerStatus) DeepCopy() *APIManagerStatus {
	if in == nil {
		return nil
	}
	out := new(APIManagerStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *APIcastOpenTracingSpec) DeepCopyInto(out *APIcastOpenTracingSpec) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.TracingLibrary != nil {
		in, out := &in.TracingLibrary, &out.TracingLibrary
		*out = new(string)
		**out = **in
	}
	if in.TracingConfigSecretRef != nil {
		in, out := &in.TracingConfigSecretRef, &out.TracingConfigSecretRef
		*out = new(v1.LocalObjectReference)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new APIcastOpenTracingSpec.
func (in *APIcastOpenTracingSpec) DeepCopy() *APIcastOpenTracingSpec {
	if in == nil {
		return nil
	}
	out := new(APIcastOpenTracingSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ApicastProductionSpec) DeepCopyInto(out *ApicastProductionSpec) {
	*out = *in
	if in.Replicas != nil {
		in, out := &in.Replicas, &out.Replicas
		*out = new(int64)
		**out = **in
	}
	if in.Affinity != nil {
		in, out := &in.Affinity, &out.Affinity
		*out = new(v1.Affinity)
		(*in).DeepCopyInto(*out)
	}
	if in.Tolerations != nil {
		in, out := &in.Tolerations, &out.Tolerations
		*out = make([]v1.Toleration, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = new(v1.ResourceRequirements)
		(*in).DeepCopyInto(*out)
	}
	if in.Workers != nil {
		in, out := &in.Workers, &out.Workers
		*out = new(int32)
		**out = **in
	}
	if in.LogLevel != nil {
		in, out := &in.LogLevel, &out.LogLevel
		*out = new(string)
		**out = **in
	}
	if in.CustomPolicies != nil {
		in, out := &in.CustomPolicies, &out.CustomPolicies
		*out = make([]CustomPolicySpec, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.OpenTracing != nil {
		in, out := &in.OpenTracing, &out.OpenTracing
		*out = new(APIcastOpenTracingSpec)
		(*in).DeepCopyInto(*out)
	}
	if in.OpenTelemetry != nil {
		in, out := &in.OpenTelemetry, &out.OpenTelemetry
		*out = new(OpenTelemetrySpec)
		(*in).DeepCopyInto(*out)
	}
	if in.CustomEnvironments != nil {
		in, out := &in.CustomEnvironments, &out.CustomEnvironments
		*out = make([]CustomEnvironmentSpec, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.HTTPSPort != nil {
		in, out := &in.HTTPSPort, &out.HTTPSPort
		*out = new(int32)
		**out = **in
	}
	if in.HTTPSVerifyDepth != nil {
		in, out := &in.HTTPSVerifyDepth, &out.HTTPSVerifyDepth
		*out = new(int64)
		**out = **in
	}
	if in.HTTPSCertificateSecretRef != nil {
		in, out := &in.HTTPSCertificateSecretRef, &out.HTTPSCertificateSecretRef
		*out = new(v1.LocalObjectReference)
		**out = **in
	}
	if in.AllProxy != nil {
		in, out := &in.AllProxy, &out.AllProxy
		*out = new(string)
		**out = **in
	}
	if in.HTTPProxy != nil {
		in, out := &in.HTTPProxy, &out.HTTPProxy
		*out = new(string)
		**out = **in
	}
	if in.HTTPSProxy != nil {
		in, out := &in.HTTPSProxy, &out.HTTPSProxy
		*out = new(string)
		**out = **in
	}
	if in.NoProxy != nil {
		in, out := &in.NoProxy, &out.NoProxy
		*out = new(string)
		**out = **in
	}
	if in.ServiceCacheSize != nil {
		in, out := &in.ServiceCacheSize, &out.ServiceCacheSize
		*out = new(int32)
		**out = **in
	}
	if in.PriorityClassName != nil {
		in, out := &in.PriorityClassName, &out.PriorityClassName
		*out = new(string)
		**out = **in
	}
	if in.TopologySpreadConstraints != nil {
		in, out := &in.TopologySpreadConstraints, &out.TopologySpreadConstraints
		*out = make([]v1.TopologySpreadConstraint, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ApicastProductionSpec.
func (in *ApicastProductionSpec) DeepCopy() *ApicastProductionSpec {
	if in == nil {
		return nil
	}
	out := new(ApicastProductionSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ApicastSpec) DeepCopyInto(out *ApicastSpec) {
	*out = *in
	if in.ApicastManagementAPI != nil {
		in, out := &in.ApicastManagementAPI, &out.ApicastManagementAPI
		*out = new(string)
		**out = **in
	}
	if in.OpenSSLVerify != nil {
		in, out := &in.OpenSSLVerify, &out.OpenSSLVerify
		*out = new(bool)
		**out = **in
	}
	if in.IncludeResponseCodes != nil {
		in, out := &in.IncludeResponseCodes, &out.IncludeResponseCodes
		*out = new(bool)
		**out = **in
	}
	if in.RegistryURL != nil {
		in, out := &in.RegistryURL, &out.RegistryURL
		*out = new(string)
		**out = **in
	}
	if in.Image != nil {
		in, out := &in.Image, &out.Image
		*out = new(string)
		**out = **in
	}
	if in.ProductionSpec != nil {
		in, out := &in.ProductionSpec, &out.ProductionSpec
		*out = new(ApicastProductionSpec)
		(*in).DeepCopyInto(*out)
	}
	if in.StagingSpec != nil {
		in, out := &in.StagingSpec, &out.StagingSpec
		*out = new(ApicastStagingSpec)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ApicastSpec.
func (in *ApicastSpec) DeepCopy() *ApicastSpec {
	if in == nil {
		return nil
	}
	out := new(ApicastSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ApicastStagingSpec) DeepCopyInto(out *ApicastStagingSpec) {
	*out = *in
	if in.Replicas != nil {
		in, out := &in.Replicas, &out.Replicas
		*out = new(int64)
		**out = **in
	}
	if in.Affinity != nil {
		in, out := &in.Affinity, &out.Affinity
		*out = new(v1.Affinity)
		(*in).DeepCopyInto(*out)
	}
	if in.Tolerations != nil {
		in, out := &in.Tolerations, &out.Tolerations
		*out = make([]v1.Toleration, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = new(v1.ResourceRequirements)
		(*in).DeepCopyInto(*out)
	}
	if in.LogLevel != nil {
		in, out := &in.LogLevel, &out.LogLevel
		*out = new(string)
		**out = **in
	}
	if in.CustomPolicies != nil {
		in, out := &in.CustomPolicies, &out.CustomPolicies
		*out = make([]CustomPolicySpec, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.OpenTracing != nil {
		in, out := &in.OpenTracing, &out.OpenTracing
		*out = new(APIcastOpenTracingSpec)
		(*in).DeepCopyInto(*out)
	}
	if in.OpenTelemetry != nil {
		in, out := &in.OpenTelemetry, &out.OpenTelemetry
		*out = new(OpenTelemetrySpec)
		(*in).DeepCopyInto(*out)
	}
	if in.CustomEnvironments != nil {
		in, out := &in.CustomEnvironments, &out.CustomEnvironments
		*out = make([]CustomEnvironmentSpec, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.HTTPSPort != nil {
		in, out := &in.HTTPSPort, &out.HTTPSPort
		*out = new(int32)
		**out = **in
	}
	if in.HTTPSVerifyDepth != nil {
		in, out := &in.HTTPSVerifyDepth, &out.HTTPSVerifyDepth
		*out = new(int64)
		**out = **in
	}
	if in.HTTPSCertificateSecretRef != nil {
		in, out := &in.HTTPSCertificateSecretRef, &out.HTTPSCertificateSecretRef
		*out = new(v1.LocalObjectReference)
		**out = **in
	}
	if in.AllProxy != nil {
		in, out := &in.AllProxy, &out.AllProxy
		*out = new(string)
		**out = **in
	}
	if in.HTTPProxy != nil {
		in, out := &in.HTTPProxy, &out.HTTPProxy
		*out = new(string)
		**out = **in
	}
	if in.HTTPSProxy != nil {
		in, out := &in.HTTPSProxy, &out.HTTPSProxy
		*out = new(string)
		**out = **in
	}
	if in.NoProxy != nil {
		in, out := &in.NoProxy, &out.NoProxy
		*out = new(string)
		**out = **in
	}
	if in.ServiceCacheSize != nil {
		in, out := &in.ServiceCacheSize, &out.ServiceCacheSize
		*out = new(int32)
		**out = **in
	}
	if in.PriorityClassName != nil {
		in, out := &in.PriorityClassName, &out.PriorityClassName
		*out = new(string)
		**out = **in
	}
	if in.TopologySpreadConstraints != nil {
		in, out := &in.TopologySpreadConstraints, &out.TopologySpreadConstraints
		*out = make([]v1.TopologySpreadConstraint, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ApicastStagingSpec.
func (in *ApicastStagingSpec) DeepCopy() *ApicastStagingSpec {
	if in == nil {
		return nil
	}
	out := new(ApicastStagingSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BackendCronSpec) DeepCopyInto(out *BackendCronSpec) {
	*out = *in
	if in.Replicas != nil {
		in, out := &in.Replicas, &out.Replicas
		*out = new(int64)
		**out = **in
	}
	if in.Affinity != nil {
		in, out := &in.Affinity, &out.Affinity
		*out = new(v1.Affinity)
		(*in).DeepCopyInto(*out)
	}
	if in.Tolerations != nil {
		in, out := &in.Tolerations, &out.Tolerations
		*out = make([]v1.Toleration, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = new(v1.ResourceRequirements)
		(*in).DeepCopyInto(*out)
	}
	if in.PriorityClassName != nil {
		in, out := &in.PriorityClassName, &out.PriorityClassName
		*out = new(string)
		**out = **in
	}
	if in.TopologySpreadConstraints != nil {
		in, out := &in.TopologySpreadConstraints, &out.TopologySpreadConstraints
		*out = make([]v1.TopologySpreadConstraint, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BackendCronSpec.
func (in *BackendCronSpec) DeepCopy() *BackendCronSpec {
	if in == nil {
		return nil
	}
	out := new(BackendCronSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BackendListenerSpec) DeepCopyInto(out *BackendListenerSpec) {
	*out = *in
	if in.Replicas != nil {
		in, out := &in.Replicas, &out.Replicas
		*out = new(int64)
		**out = **in
	}
	if in.Affinity != nil {
		in, out := &in.Affinity, &out.Affinity
		*out = new(v1.Affinity)
		(*in).DeepCopyInto(*out)
	}
	if in.Tolerations != nil {
		in, out := &in.Tolerations, &out.Tolerations
		*out = make([]v1.Toleration, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = new(v1.ResourceRequirements)
		(*in).DeepCopyInto(*out)
	}
	if in.PriorityClassName != nil {
		in, out := &in.PriorityClassName, &out.PriorityClassName
		*out = new(string)
		**out = **in
	}
	if in.TopologySpreadConstraints != nil {
		in, out := &in.TopologySpreadConstraints, &out.TopologySpreadConstraints
		*out = make([]v1.TopologySpreadConstraint, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BackendListenerSpec.
func (in *BackendListenerSpec) DeepCopy() *BackendListenerSpec {
	if in == nil {
		return nil
	}
	out := new(BackendListenerSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BackendRedisPersistentVolumeClaimSpec) DeepCopyInto(out *BackendRedisPersistentVolumeClaimSpec) {
	*out = *in
	if in.StorageClassName != nil {
		in, out := &in.StorageClassName, &out.StorageClassName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BackendRedisPersistentVolumeClaimSpec.
func (in *BackendRedisPersistentVolumeClaimSpec) DeepCopy() *BackendRedisPersistentVolumeClaimSpec {
	if in == nil {
		return nil
	}
	out := new(BackendRedisPersistentVolumeClaimSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BackendSpec) DeepCopyInto(out *BackendSpec) {
	*out = *in
	if in.Image != nil {
		in, out := &in.Image, &out.Image
		*out = new(string)
		**out = **in
	}
	if in.RedisImage != nil {
		in, out := &in.RedisImage, &out.RedisImage
		*out = new(string)
		**out = **in
	}
	if in.RedisPersistentVolumeClaimSpec != nil {
		in, out := &in.RedisPersistentVolumeClaimSpec, &out.RedisPersistentVolumeClaimSpec
		*out = new(BackendRedisPersistentVolumeClaimSpec)
		(*in).DeepCopyInto(*out)
	}
	if in.RedisAffinity != nil {
		in, out := &in.RedisAffinity, &out.RedisAffinity
		*out = new(v1.Affinity)
		(*in).DeepCopyInto(*out)
	}
	if in.RedisTolerations != nil {
		in, out := &in.RedisTolerations, &out.RedisTolerations
		*out = make([]v1.Toleration, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RedisResources != nil {
		in, out := &in.RedisResources, &out.RedisResources
		*out = new(v1.ResourceRequirements)
		(*in).DeepCopyInto(*out)
	}
	if in.RedisPriorityClassName != nil {
		in, out := &in.RedisPriorityClassName, &out.RedisPriorityClassName
		*out = new(string)
		**out = **in
	}
	if in.RedisTopologySpreadConstraints != nil {
		in, out := &in.RedisTopologySpreadConstraints, &out.RedisTopologySpreadConstraints
		*out = make([]v1.TopologySpreadConstraint, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RedisLabels != nil {
		in, out := &in.RedisLabels, &out.RedisLabels
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.RedisAnnotations != nil {
		in, out := &in.RedisAnnotations, &out.RedisAnnotations
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.ListenerSpec != nil {
		in, out := &in.ListenerSpec, &out.ListenerSpec
		*out = new(BackendListenerSpec)
		(*in).DeepCopyInto(*out)
	}
	if in.WorkerSpec != nil {
		in, out := &in.WorkerSpec, &out.WorkerSpec
		*out = new(BackendWorkerSpec)
		(*in).DeepCopyInto(*out)
	}
	if in.CronSpec != nil {
		in, out := &in.CronSpec, &out.CronSpec
		*out = new(BackendCronSpec)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BackendSpec.
func (in *BackendSpec) DeepCopy() *BackendSpec {
	if in == nil {
		return nil
	}
	out := new(BackendSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BackendWorkerSpec) DeepCopyInto(out *BackendWorkerSpec) {
	*out = *in
	if in.Replicas != nil {
		in, out := &in.Replicas, &out.Replicas
		*out = new(int64)
		**out = **in
	}
	if in.Affinity != nil {
		in, out := &in.Affinity, &out.Affinity
		*out = new(v1.Affinity)
		(*in).DeepCopyInto(*out)
	}
	if in.Tolerations != nil {
		in, out := &in.Tolerations, &out.Tolerations
		*out = make([]v1.Toleration, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = new(v1.ResourceRequirements)
		(*in).DeepCopyInto(*out)
	}
	if in.PriorityClassName != nil {
		in, out := &in.PriorityClassName, &out.PriorityClassName
		*out = new(string)
		**out = **in
	}
	if in.TopologySpreadConstraints != nil {
		in, out := &in.TopologySpreadConstraints, &out.TopologySpreadConstraints
		*out = make([]v1.TopologySpreadConstraint, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BackendWorkerSpec.
func (in *BackendWorkerSpec) DeepCopy() *BackendWorkerSpec {
	if in == nil {
		return nil
	}
	out := new(BackendWorkerSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CustomEnvironmentSpec) DeepCopyInto(out *CustomEnvironmentSpec) {
	*out = *in
	if in.SecretRef != nil {
		in, out := &in.SecretRef, &out.SecretRef
		*out = new(v1.LocalObjectReference)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CustomEnvironmentSpec.
func (in *CustomEnvironmentSpec) DeepCopy() *CustomEnvironmentSpec {
	if in == nil {
		return nil
	}
	out := new(CustomEnvironmentSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CustomPolicySpec) DeepCopyInto(out *CustomPolicySpec) {
	*out = *in
	if in.SecretRef != nil {
		in, out := &in.SecretRef, &out.SecretRef
		*out = new(v1.LocalObjectReference)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CustomPolicySpec.
func (in *CustomPolicySpec) DeepCopy() *CustomPolicySpec {
	if in == nil {
		return nil
	}
	out := new(CustomPolicySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DeprecatedSystemS3Spec) DeepCopyInto(out *DeprecatedSystemS3Spec) {
	*out = *in
	out.AWSCredentials = in.AWSCredentials
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DeprecatedSystemS3Spec.
func (in *DeprecatedSystemS3Spec) DeepCopy() *DeprecatedSystemS3Spec {
	if in == nil {
		return nil
	}
	out := new(DeprecatedSystemS3Spec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExternalBackendComponents) DeepCopyInto(out *ExternalBackendComponents) {
	*out = *in
	if in.Redis != nil {
		in, out := &in.Redis, &out.Redis
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExternalBackendComponents.
func (in *ExternalBackendComponents) DeepCopy() *ExternalBackendComponents {
	if in == nil {
		return nil
	}
	out := new(ExternalBackendComponents)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExternalComponentsSpec) DeepCopyInto(out *ExternalComponentsSpec) {
	*out = *in
	if in.System != nil {
		in, out := &in.System, &out.System
		*out = new(ExternalSystemComponents)
		(*in).DeepCopyInto(*out)
	}
	if in.Backend != nil {
		in, out := &in.Backend, &out.Backend
		*out = new(ExternalBackendComponents)
		(*in).DeepCopyInto(*out)
	}
	if in.Zync != nil {
		in, out := &in.Zync, &out.Zync
		*out = new(ExternalZyncComponents)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExternalComponentsSpec.
func (in *ExternalComponentsSpec) DeepCopy() *ExternalComponentsSpec {
	if in == nil {
		return nil
	}
	out := new(ExternalComponentsSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExternalSystemComponents) DeepCopyInto(out *ExternalSystemComponents) {
	*out = *in
	if in.Redis != nil {
		in, out := &in.Redis, &out.Redis
		*out = new(bool)
		**out = **in
	}
	if in.Database != nil {
		in, out := &in.Database, &out.Database
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExternalSystemComponents.
func (in *ExternalSystemComponents) DeepCopy() *ExternalSystemComponents {
	if in == nil {
		return nil
	}
	out := new(ExternalSystemComponents)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExternalZyncComponents) DeepCopyInto(out *ExternalZyncComponents) {
	*out = *in
	if in.Database != nil {
		in, out := &in.Database, &out.Database
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExternalZyncComponents.
func (in *ExternalZyncComponents) DeepCopy() *ExternalZyncComponents {
	if in == nil {
		return nil
	}
	out := new(ExternalZyncComponents)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HighAvailabilitySpec) DeepCopyInto(out *HighAvailabilitySpec) {
	*out = *in
	if in.ExternalZyncDatabaseEnabled != nil {
		in, out := &in.ExternalZyncDatabaseEnabled, &out.ExternalZyncDatabaseEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HighAvailabilitySpec.
func (in *HighAvailabilitySpec) DeepCopy() *HighAvailabilitySpec {
	if in == nil {
		return nil
	}
	out := new(HighAvailabilitySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MonitoringSpec) DeepCopyInto(out *MonitoringSpec) {
	*out = *in
	if in.EnablePrometheusRules != nil {
		in, out := &in.EnablePrometheusRules, &out.EnablePrometheusRules
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MonitoringSpec.
func (in *MonitoringSpec) DeepCopy() *MonitoringSpec {
	if in == nil {
		return nil
	}
	out := new(MonitoringSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OpenTelemetrySpec) DeepCopyInto(out *OpenTelemetrySpec) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.TracingConfigSecretRef != nil {
		in, out := &in.TracingConfigSecretRef, &out.TracingConfigSecretRef
		*out = new(v1.LocalObjectReference)
		**out = **in
	}
	if in.TracingConfigSecretKey != nil {
		in, out := &in.TracingConfigSecretKey, &out.TracingConfigSecretKey
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OpenTelemetrySpec.
func (in *OpenTelemetrySpec) DeepCopy() *OpenTelemetrySpec {
	if in == nil {
		return nil
	}
	out := new(OpenTelemetrySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PVCGenericSpec) DeepCopyInto(out *PVCGenericSpec) {
	*out = *in
	if in.StorageClassName != nil {
		in, out := &in.StorageClassName, &out.StorageClassName
		*out = new(string)
		**out = **in
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = new(PersistentVolumeClaimResources)
		(*in).DeepCopyInto(*out)
	}
	if in.VolumeName != nil {
		in, out := &in.VolumeName, &out.VolumeName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PVCGenericSpec.
func (in *PVCGenericSpec) DeepCopy() *PVCGenericSpec {
	if in == nil {
		return nil
	}
	out := new(PVCGenericSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PersistentVolumeClaimBackupDestination) DeepCopyInto(out *PersistentVolumeClaimBackupDestination) {
	*out = *in
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = new(PersistentVolumeClaimResources)
		(*in).DeepCopyInto(*out)
	}
	if in.VolumeName != nil {
		in, out := &in.VolumeName, &out.VolumeName
		*out = new(string)
		**out = **in
	}
	if in.StorageClass != nil {
		in, out := &in.StorageClass, &out.StorageClass
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PersistentVolumeClaimBackupDestination.
func (in *PersistentVolumeClaimBackupDestination) DeepCopy() *PersistentVolumeClaimBackupDestination {
	if in == nil {
		return nil
	}
	out := new(PersistentVolumeClaimBackupDestination)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PersistentVolumeClaimResources) DeepCopyInto(out *PersistentVolumeClaimResources) {
	*out = *in
	out.Requests = in.Requests.DeepCopy()
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PersistentVolumeClaimResources.
func (in *PersistentVolumeClaimResources) DeepCopy() *PersistentVolumeClaimResources {
	if in == nil {
		return nil
	}
	out := new(PersistentVolumeClaimResources)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PersistentVolumeClaimRestoreSource) DeepCopyInto(out *PersistentVolumeClaimRestoreSource) {
	*out = *in
	out.ClaimSource = in.ClaimSource
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PersistentVolumeClaimRestoreSource.
func (in *PersistentVolumeClaimRestoreSource) DeepCopy() *PersistentVolumeClaimRestoreSource {
	if in == nil {
		return nil
	}
	out := new(PersistentVolumeClaimRestoreSource)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PodDisruptionBudgetSpec) DeepCopyInto(out *PodDisruptionBudgetSpec) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PodDisruptionBudgetSpec.
func (in *PodDisruptionBudgetSpec) DeepCopy() *PodDisruptionBudgetSpec {
	if in == nil {
		return nil
	}
	out := new(PodDisruptionBudgetSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *STSSpec) DeepCopyInto(out *STSSpec) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.Audience != nil {
		in, out := &in.Audience, &out.Audience
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new STSSpec.
func (in *STSSpec) DeepCopy() *STSSpec {
	if in == nil {
		return nil
	}
	out := new(STSSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SystemAppSpec) DeepCopyInto(out *SystemAppSpec) {
	*out = *in
	if in.Replicas != nil {
		in, out := &in.Replicas, &out.Replicas
		*out = new(int64)
		**out = **in
	}
	if in.Affinity != nil {
		in, out := &in.Affinity, &out.Affinity
		*out = new(v1.Affinity)
		(*in).DeepCopyInto(*out)
	}
	if in.Tolerations != nil {
		in, out := &in.Tolerations, &out.Tolerations
		*out = make([]v1.Toleration, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MasterContainerResources != nil {
		in, out := &in.MasterContainerResources, &out.MasterContainerResources
		*out = new(v1.ResourceRequirements)
		(*in).DeepCopyInto(*out)
	}
	if in.ProviderContainerResources != nil {
		in, out := &in.ProviderContainerResources, &out.ProviderContainerResources
		*out = new(v1.ResourceRequirements)
		(*in).DeepCopyInto(*out)
	}
	if in.DeveloperContainerResources != nil {
		in, out := &in.DeveloperContainerResources, &out.DeveloperContainerResources
		*out = new(v1.ResourceRequirements)
		(*in).DeepCopyInto(*out)
	}
	if in.PriorityClassName != nil {
		in, out := &in.PriorityClassName, &out.PriorityClassName
		*out = new(string)
		**out = **in
	}
	if in.TopologySpreadConstraints != nil {
		in, out := &in.TopologySpreadConstraints, &out.TopologySpreadConstraints
		*out = make([]v1.TopologySpreadConstraint, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SystemAppSpec.
func (in *SystemAppSpec) DeepCopy() *SystemAppSpec {
	if in == nil {
		return nil
	}
	out := new(SystemAppSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SystemDatabaseSpec) DeepCopyInto(out *SystemDatabaseSpec) {
	*out = *in
	if in.MySQL != nil {
		in, out := &in.MySQL, &out.MySQL
		*out = new(SystemMySQLSpec)
		(*in).DeepCopyInto(*out)
	}
	if in.PostgreSQL != nil {
		in, out := &in.PostgreSQL, &out.PostgreSQL
		*out = new(SystemPostgreSQLSpec)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SystemDatabaseSpec.
func (in *SystemDatabaseSpec) DeepCopy() *SystemDatabaseSpec {
	if in == nil {
		return nil
	}
	out := new(SystemDatabaseSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SystemFileStorageSpec) DeepCopyInto(out *SystemFileStorageSpec) {
	*out = *in
	if in.PVC != nil {
		in, out := &in.PVC, &out.PVC
		*out = new(PVCGenericSpec)
		(*in).DeepCopyInto(*out)
	}
	if in.DeprecatedS3 != nil {
		in, out := &in.DeprecatedS3, &out.DeprecatedS3
		*out = new(DeprecatedSystemS3Spec)
		**out = **in
	}
	if in.S3 != nil {
		in, out := &in.S3, &out.S3
		*out = new(SystemS3Spec)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SystemFileStorageSpec.
func (in *SystemFileStorageSpec) DeepCopy() *SystemFileStorageSpec {
	if in == nil {
		return nil
	}
	out := new(SystemFileStorageSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SystemMySQLSpec) DeepCopyInto(out *SystemMySQLSpec) {
	*out = *in
	if in.Image != nil {
		in, out := &in.Image, &out.Image
		*out = new(string)
		**out = **in
	}
	if in.PersistentVolumeClaimSpec != nil {
		in, out := &in.PersistentVolumeClaimSpec, &out.PersistentVolumeClaimSpec
		*out = new(PVCGenericSpec)
		(*in).DeepCopyInto(*out)
	}
	if in.Affinity != nil {
		in, out := &in.Affinity, &out.Affinity
		*out = new(v1.Affinity)
		(*in).DeepCopyInto(*out)
	}
	if in.Tolerations != nil {
		in, out := &in.Tolerations, &out.Tolerations
		*out = make([]v1.Toleration, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = new(v1.ResourceRequirements)
		(*in).DeepCopyInto(*out)
	}
	if in.PriorityClassName != nil {
		in, out := &in.PriorityClassName, &out.PriorityClassName
		*out = new(string)
		**out = **in
	}
	if in.TopologySpreadConstraints != nil {
		in, out := &in.TopologySpreadConstraints, &out.TopologySpreadConstraints
		*out = make([]v1.TopologySpreadConstraint, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SystemMySQLSpec.
func (in *SystemMySQLSpec) DeepCopy() *SystemMySQLSpec {
	if in == nil {
		return nil
	}
	out := new(SystemMySQLSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SystemPostgreSQLSpec) DeepCopyInto(out *SystemPostgreSQLSpec) {
	*out = *in
	if in.Image != nil {
		in, out := &in.Image, &out.Image
		*out = new(string)
		**out = **in
	}
	if in.PersistentVolumeClaimSpec != nil {
		in, out := &in.PersistentVolumeClaimSpec, &out.PersistentVolumeClaimSpec
		*out = new(PVCGenericSpec)
		(*in).DeepCopyInto(*out)
	}
	if in.Affinity != nil {
		in, out := &in.Affinity, &out.Affinity
		*out = new(v1.Affinity)
		(*in).DeepCopyInto(*out)
	}
	if in.Tolerations != nil {
		in, out := &in.Tolerations, &out.Tolerations
		*out = make([]v1.Toleration, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = new(v1.ResourceRequirements)
		(*in).DeepCopyInto(*out)
	}
	if in.PriorityClassName != nil {
		in, out := &in.PriorityClassName, &out.PriorityClassName
		*out = new(string)
		**out = **in
	}
	if in.TopologySpreadConstraints != nil {
		in, out := &in.TopologySpreadConstraints, &out.TopologySpreadConstraints
		*out = make([]v1.TopologySpreadConstraint, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SystemPostgreSQLSpec.
func (in *SystemPostgreSQLSpec) DeepCopy() *SystemPostgreSQLSpec {
	if in == nil {
		return nil
	}
	out := new(SystemPostgreSQLSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SystemRedisPersistentVolumeClaimSpec) DeepCopyInto(out *SystemRedisPersistentVolumeClaimSpec) {
	*out = *in
	if in.StorageClassName != nil {
		in, out := &in.StorageClassName, &out.StorageClassName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SystemRedisPersistentVolumeClaimSpec.
func (in *SystemRedisPersistentVolumeClaimSpec) DeepCopy() *SystemRedisPersistentVolumeClaimSpec {
	if in == nil {
		return nil
	}
	out := new(SystemRedisPersistentVolumeClaimSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SystemS3Spec) DeepCopyInto(out *SystemS3Spec) {
	*out = *in
	out.ConfigurationSecretRef = in.ConfigurationSecretRef
	if in.STS != nil {
		in, out := &in.STS, &out.STS
		*out = new(STSSpec)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SystemS3Spec.
func (in *SystemS3Spec) DeepCopy() *SystemS3Spec {
	if in == nil {
		return nil
	}
	out := new(SystemS3Spec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SystemSearchdSpec) DeepCopyInto(out *SystemSearchdSpec) {
	*out = *in
	if in.Image != nil {
		in, out := &in.Image, &out.Image
		*out = new(string)
		**out = **in
	}
	if in.Affinity != nil {
		in, out := &in.Affinity, &out.Affinity
		*out = new(v1.Affinity)
		(*in).DeepCopyInto(*out)
	}
	if in.Tolerations != nil {
		in, out := &in.Tolerations, &out.Tolerations
		*out = make([]v1.Toleration, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = new(v1.ResourceRequirements)
		(*in).DeepCopyInto(*out)
	}
	if in.PVC != nil {
		in, out := &in.PVC, &out.PVC
		*out = new(PVCGenericSpec)
		(*in).DeepCopyInto(*out)
	}
	if in.PriorityClassName != nil {
		in, out := &in.PriorityClassName, &out.PriorityClassName
		*out = new(string)
		**out = **in
	}
	if in.TopologySpreadConstraints != nil {
		in, out := &in.TopologySpreadConstraints, &out.TopologySpreadConstraints
		*out = make([]v1.TopologySpreadConstraint, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SystemSearchdSpec.
func (in *SystemSearchdSpec) DeepCopy() *SystemSearchdSpec {
	if in == nil {
		return nil
	}
	out := new(SystemSearchdSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SystemSidekiqSpec) DeepCopyInto(out *SystemSidekiqSpec) {
	*out = *in
	if in.Replicas != nil {
		in, out := &in.Replicas, &out.Replicas
		*out = new(int64)
		**out = **in
	}
	if in.Affinity != nil {
		in, out := &in.Affinity, &out.Affinity
		*out = new(v1.Affinity)
		(*in).DeepCopyInto(*out)
	}
	if in.Tolerations != nil {
		in, out := &in.Tolerations, &out.Tolerations
		*out = make([]v1.Toleration, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = new(v1.ResourceRequirements)
		(*in).DeepCopyInto(*out)
	}
	if in.PriorityClassName != nil {
		in, out := &in.PriorityClassName, &out.PriorityClassName
		*out = new(string)
		**out = **in
	}
	if in.TopologySpreadConstraints != nil {
		in, out := &in.TopologySpreadConstraints, &out.TopologySpreadConstraints
		*out = make([]v1.TopologySpreadConstraint, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SystemSidekiqSpec.
func (in *SystemSidekiqSpec) DeepCopy() *SystemSidekiqSpec {
	if in == nil {
		return nil
	}
	out := new(SystemSidekiqSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SystemSpec) DeepCopyInto(out *SystemSpec) {
	*out = *in
	if in.Image != nil {
		in, out := &in.Image, &out.Image
		*out = new(string)
		**out = **in
	}
	if in.MemcachedImage != nil {
		in, out := &in.MemcachedImage, &out.MemcachedImage
		*out = new(string)
		**out = **in
	}
	if in.MemcachedAffinity != nil {
		in, out := &in.MemcachedAffinity, &out.MemcachedAffinity
		*out = new(v1.Affinity)
		(*in).DeepCopyInto(*out)
	}
	if in.MemcachedTolerations != nil {
		in, out := &in.MemcachedTolerations, &out.MemcachedTolerations
		*out = make([]v1.Toleration, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MemcachedResources != nil {
		in, out := &in.MemcachedResources, &out.MemcachedResources
		*out = new(v1.ResourceRequirements)
		(*in).DeepCopyInto(*out)
	}
	if in.MemcachedPriorityClassName != nil {
		in, out := &in.MemcachedPriorityClassName, &out.MemcachedPriorityClassName
		*out = new(string)
		**out = **in
	}
	if in.MemcachedTopologySpreadConstraints != nil {
		in, out := &in.MemcachedTopologySpreadConstraints, &out.MemcachedTopologySpreadConstraints
		*out = make([]v1.TopologySpreadConstraint, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MemcachedLabels != nil {
		in, out := &in.MemcachedLabels, &out.MemcachedLabels
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.MemcachedAnnotations != nil {
		in, out := &in.MemcachedAnnotations, &out.MemcachedAnnotations
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.RedisImage != nil {
		in, out := &in.RedisImage, &out.RedisImage
		*out = new(string)
		**out = **in
	}
	if in.RedisPersistentVolumeClaimSpec != nil {
		in, out := &in.RedisPersistentVolumeClaimSpec, &out.RedisPersistentVolumeClaimSpec
		*out = new(SystemRedisPersistentVolumeClaimSpec)
		(*in).DeepCopyInto(*out)
	}
	if in.RedisAffinity != nil {
		in, out := &in.RedisAffinity, &out.RedisAffinity
		*out = new(v1.Affinity)
		(*in).DeepCopyInto(*out)
	}
	if in.RedisTolerations != nil {
		in, out := &in.RedisTolerations, &out.RedisTolerations
		*out = make([]v1.Toleration, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RedisResources != nil {
		in, out := &in.RedisResources, &out.RedisResources
		*out = new(v1.ResourceRequirements)
		(*in).DeepCopyInto(*out)
	}
	if in.RedisPriorityClassName != nil {
		in, out := &in.RedisPriorityClassName, &out.RedisPriorityClassName
		*out = new(string)
		**out = **in
	}
	if in.RedisTopologySpreadConstraints != nil {
		in, out := &in.RedisTopologySpreadConstraints, &out.RedisTopologySpreadConstraints
		*out = make([]v1.TopologySpreadConstraint, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RedisLabels != nil {
		in, out := &in.RedisLabels, &out.RedisLabels
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.RedisAnnotations != nil {
		in, out := &in.RedisAnnotations, &out.RedisAnnotations
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.FileStorageSpec != nil {
		in, out := &in.FileStorageSpec, &out.FileStorageSpec
		*out = new(SystemFileStorageSpec)
		(*in).DeepCopyInto(*out)
	}
	if in.DatabaseSpec != nil {
		in, out := &in.DatabaseSpec, &out.DatabaseSpec
		*out = new(SystemDatabaseSpec)
		(*in).DeepCopyInto(*out)
	}
	if in.AppSpec != nil {
		in, out := &in.AppSpec, &out.AppSpec
		*out = new(SystemAppSpec)
		(*in).DeepCopyInto(*out)
	}
	if in.SidekiqSpec != nil {
		in, out := &in.SidekiqSpec, &out.SidekiqSpec
		*out = new(SystemSidekiqSpec)
		(*in).DeepCopyInto(*out)
	}
	if in.SphinxSpec != nil {
		in, out := &in.SphinxSpec, &out.SphinxSpec
		*out = new(SystemSphinxSpec)
		(*in).DeepCopyInto(*out)
	}
	if in.SearchdSpec != nil {
		in, out := &in.SearchdSpec, &out.SearchdSpec
		*out = new(SystemSearchdSpec)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SystemSpec.
func (in *SystemSpec) DeepCopy() *SystemSpec {
	if in == nil {
		return nil
	}
	out := new(SystemSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SystemSphinxSpec) DeepCopyInto(out *SystemSphinxSpec) {
	*out = *in
	if in.Affinity != nil {
		in, out := &in.Affinity, &out.Affinity
		*out = new(v1.Affinity)
		(*in).DeepCopyInto(*out)
	}
	if in.Tolerations != nil {
		in, out := &in.Tolerations, &out.Tolerations
		*out = make([]v1.Toleration, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = new(v1.ResourceRequirements)
		(*in).DeepCopyInto(*out)
	}
	if in.PriorityClassName != nil {
		in, out := &in.PriorityClassName, &out.PriorityClassName
		*out = new(string)
		**out = **in
	}
	if in.TopologySpreadConstraints != nil {
		in, out := &in.TopologySpreadConstraints, &out.TopologySpreadConstraints
		*out = make([]v1.TopologySpreadConstraint, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SystemSphinxSpec.
func (in *SystemSphinxSpec) DeepCopy() *SystemSphinxSpec {
	if in == nil {
		return nil
	}
	out := new(SystemSphinxSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ZyncAppSpec) DeepCopyInto(out *ZyncAppSpec) {
	*out = *in
	if in.Replicas != nil {
		in, out := &in.Replicas, &out.Replicas
		*out = new(int64)
		**out = **in
	}
	if in.Affinity != nil {
		in, out := &in.Affinity, &out.Affinity
		*out = new(v1.Affinity)
		(*in).DeepCopyInto(*out)
	}
	if in.Tolerations != nil {
		in, out := &in.Tolerations, &out.Tolerations
		*out = make([]v1.Toleration, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = new(v1.ResourceRequirements)
		(*in).DeepCopyInto(*out)
	}
	if in.PriorityClassName != nil {
		in, out := &in.PriorityClassName, &out.PriorityClassName
		*out = new(string)
		**out = **in
	}
	if in.TopologySpreadConstraints != nil {
		in, out := &in.TopologySpreadConstraints, &out.TopologySpreadConstraints
		*out = make([]v1.TopologySpreadConstraint, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ZyncAppSpec.
func (in *ZyncAppSpec) DeepCopy() *ZyncAppSpec {
	if in == nil {
		return nil
	}
	out := new(ZyncAppSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ZyncQueSpec) DeepCopyInto(out *ZyncQueSpec) {
	*out = *in
	if in.Replicas != nil {
		in, out := &in.Replicas, &out.Replicas
		*out = new(int64)
		**out = **in
	}
	if in.Affinity != nil {
		in, out := &in.Affinity, &out.Affinity
		*out = new(v1.Affinity)
		(*in).DeepCopyInto(*out)
	}
	if in.Tolerations != nil {
		in, out := &in.Tolerations, &out.Tolerations
		*out = make([]v1.Toleration, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = new(v1.ResourceRequirements)
		(*in).DeepCopyInto(*out)
	}
	if in.PriorityClassName != nil {
		in, out := &in.PriorityClassName, &out.PriorityClassName
		*out = new(string)
		**out = **in
	}
	if in.TopologySpreadConstraints != nil {
		in, out := &in.TopologySpreadConstraints, &out.TopologySpreadConstraints
		*out = make([]v1.TopologySpreadConstraint, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ZyncQueSpec.
func (in *ZyncQueSpec) DeepCopy() *ZyncQueSpec {
	if in == nil {
		return nil
	}
	out := new(ZyncQueSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ZyncSpec) DeepCopyInto(out *ZyncSpec) {
	*out = *in
	if in.Image != nil {
		in, out := &in.Image, &out.Image
		*out = new(string)
		**out = **in
	}
	if in.PostgreSQLImage != nil {
		in, out := &in.PostgreSQLImage, &out.PostgreSQLImage
		*out = new(string)
		**out = **in
	}
	if in.DatabaseAffinity != nil {
		in, out := &in.DatabaseAffinity, &out.DatabaseAffinity
		*out = new(v1.Affinity)
		(*in).DeepCopyInto(*out)
	}
	if in.DatabaseTolerations != nil {
		in, out := &in.DatabaseTolerations, &out.DatabaseTolerations
		*out = make([]v1.Toleration, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DatabaseResources != nil {
		in, out := &in.DatabaseResources, &out.DatabaseResources
		*out = new(v1.ResourceRequirements)
		(*in).DeepCopyInto(*out)
	}
	if in.AppSpec != nil {
		in, out := &in.AppSpec, &out.AppSpec
		*out = new(ZyncAppSpec)
		(*in).DeepCopyInto(*out)
	}
	if in.QueSpec != nil {
		in, out := &in.QueSpec, &out.QueSpec
		*out = new(ZyncQueSpec)
		(*in).DeepCopyInto(*out)
	}
	if in.DatabasePriorityClassName != nil {
		in, out := &in.DatabasePriorityClassName, &out.DatabasePriorityClassName
		*out = new(string)
		**out = **in
	}
	if in.DatabaseTopologySpreadConstraints != nil {
		in, out := &in.DatabaseTopologySpreadConstraints, &out.DatabaseTopologySpreadConstraints
		*out = make([]v1.TopologySpreadConstraint, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DatabaseLabels != nil {
		in, out := &in.DatabaseLabels, &out.DatabaseLabels
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.DatabaseAnnotations != nil {
		in, out := &in.DatabaseAnnotations, &out.DatabaseAnnotations
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ZyncSpec.
func (in *ZyncSpec) DeepCopy() *ZyncSpec {
	if in == nil {
		return nil
	}
	out := new(ZyncSpec)
	in.DeepCopyInto(out)
	return out
}
