version: 2.1

##################################### YAML ANCHORS  ############################################

tag-triggerr: &tag-trigger
  tags:
    only: /^v.*/

only-master-filter: &only-master-filter
  filters:
    branches:
      only: master

nightly-trigger: &nightly-trigger
  triggers:
    - schedule:
        cron: "0 0 * * *"
        <<: *only-master-filter

commands:
  attach-workspace:
    steps:
    - run:
        name: Preparing workspace directory
        command: |
          sudo rm -rf /tmp/workspace
          sudo mkdir -p /tmp/workspace
          sudo chown -vf circleci:circleci /tmp/workspace
        working_directory: /
    - attach_workspace:
        at: /tmp/workspace

  docker-login:
    steps:
      - run:
          name: Docker login
          command: |
            docker login -u="${DOCKER_USERNAME}" -p="${DOCKER_PASSWORD}" "${DOCKER_REGISTRY}"

  install-operator-sdk:
    steps:
      - run:
          name: Install operator-sdk
          command: |
            export OPERATOR_SDK_RELEASE_VERSION=v0.8.0
            curl -OJL https://github.com/operator-framework/operator-sdk/releases/download/${OPERATOR_SDK_RELEASE_VERSION}/operator-sdk-${OPERATOR_SDK_RELEASE_VERSION}-x86_64-linux-gnu
            chmod +x operator-sdk-${OPERATOR_SDK_RELEASE_VERSION}-x86_64-linux-gnu && sudo cp operator-sdk-${OPERATOR_SDK_RELEASE_VERSION}-x86_64-linux-gnu /usr/local/bin/operator-sdk && rm operator-sdk-${OPERATOR_SDK_RELEASE_VERSION}-x86_64-linux-gnu

  install-operator-dependencies:
    steps:
      - restore_cache:
          keys:
            - v4-3scaleoperator-vendor-{{ arch }}-{{ checksum "go.sum" }}
            # Find the most recently generated cache used from any branch
            - v4-3scaleoperator-vendor-{{ arch }}
      - run:
          name: Install operator dependencies
          command: |
            make vendor
      - save_cache:
          key: v4-3scaleoperator-vendor-{{ arch }}-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg"

  install-openshift:
    steps:
      - run:
          name: Install OpenShift Client Tools
          working_directory: /tmp
          command: |
            curl --fail -L  https://github.com/openshift/origin/releases/download/v3.11.0/openshift-origin-client-tools-v3.11.0-0cbc58b-linux-64bit.tar.gz | tar -xzf-
            sudo mv /tmp/openshift-origin-client-tools-*-linux-64bit/oc /usr/local/bin/
            sudo mv /tmp/openshift-origin-client-tools-*-linux-64bit/kubectl /usr/local/bin/
      - run:
          name: Configure Docker
          command: |
            echo '{"insecure-registries": ["172.30.0.0/16"]}' | sudo tee --append /etc/docker/daemon.json
            sudo service docker restart

      - run:
          name: Get docker host IP
          command: |
            echo "export DOCKER_HOST_IP=$(docker run --net=host codenvy/che-ip)" >> $BASH_ENV

      - run:
          name: Start and Configure OpenShift Cluster
          working_directory: /tmp/openshift
          command: |
            oc cluster up --public-hostname=${DOCKER_HOST_IP} --enable=persistent-volumes \
              --enable=registry --enable=router
            oc login https://${DOCKER_HOST_IP}:8443 -u system:admin --insecure-skip-tls-verify=true > /dev/null
            oc adm policy add-cluster-role-to-user cluster-admin developer > /dev/null
            oc adm policy add-scc-to-group hostmount-anyuid system:serviceaccounts
            oc login https://${DOCKER_HOST_IP}:8443 -u developer --insecure-skip-tls-verify=true > /dev/null

            oc wait --timeout=90s --for=condition=available dc/docker-registry --namespace=default || oc rollout retry dc/docker-registry --namespace=default

  install-golang:
    steps:
      - run:
          name: Setup GO env
          command: |
            mkdir -p ~/tmp
            echo 'export TMPDIR=~/tmp/' >> $BASH_ENV
            echo 'export GOROOT=/opt/go' >> $BASH_ENV
            echo 'export GOPATH=~/go' >> $BASH_ENV
            sudo mkdir -p /opt/go/bin
            mkdir -p ~/go/bin
            echo 'export PATH=$GOROOT/bin:$PATH' >> $BASH_ENV
            echo 'export PATH=$GOPATH/bin:$PATH' >> $BASH_ENV
      - run:
          name: Install Golang
          command: |
            curl --fail -L https://dl.google.com/go/go1.12.5.linux-amd64.tar.gz | sudo tar -C /opt -xzf-

  deploy-3scale-eval-from-template-imagestreamsless:
    steps:
      - run:
          name: Deploy 3scale from amp-eval template without imagestreams
          command: |
            ruby -ryaml -rjson -e 'puts YAML.load(ARGF).tap{|t| t["objects"].reject!{|o| o["kind"]=="ImageStream"}}.to_json' pkg/3scale/amp/auto-generated-templates/amp/amp-eval.yml | \
              oc new-app -f- --param WILDCARD_DOMAIN=lvh.me --param AMP_RELEASE=master
            oc wait --for=condition=available --timeout=-1s $(oc get dc --output=name)

            oc get events | egrep ' Failed ' || :
            oc get events -o json | jq '[.items[] | select(.reason == "Failed") | debug ] | length == 0'  --exit-status
          no_output_timeout: 30m

  deploy-3scale-eval-from-template:
    steps:
      - run:
          name: Deploy 3scale from amp-eval template with nightly images
          command: |
            oc new-app --file pkg/3scale/amp/auto-generated-templates/amp/amp-eval.yml \
              --param AMP_BACKEND_IMAGE=quay.io/3scale/apisonator:nightly \
              --param AMP_ZYNC_IMAGE=quay.io/3scale/zync:nightly \
              --param AMP_APICAST_IMAGE=quay.io/3scale/apicast:nightly \
              --param AMP_SYSTEM_IMAGE=quay.io/3scale/porta:nightly \
              --param WILDCARD_DOMAIN=lvh.me --param TENANT_NAME=3scale
            oc wait --for=condition=available --timeout=-1s $(oc get dc --output=name)

            oc get events | egrep ' Failed ' || :
            oc get events -o json | jq '[.items[] | select(.reason == "Failed") | debug ] | length == 0'  --exit-status
          no_output_timeout: 30m

  push-3scale-images-to-quay:
    steps:
      - docker-login
      - run:
          name: Push images to quay.io
          command: |
            oc whoami --show-token | docker login -u $(oc whoami) --password-stdin 172.30.1.1:5000
            project=$(oc project -q)

            oc image mirror $(for component in apicast zync ; do
              echo 172.30.1.1:5000/$project/amp-$component:latest=quay.io/3scale/$component:nightly
            done) 172.30.1.1:5000/$project/amp-backend:latest=quay.io/3scale/apisonator:nightly \
            172.30.1.1:5000/$project/amp-system:latest=quay.io/3scale/porta:nightly --insecure

  create-secrets:
    steps:
      - run:
          name: Import OpenShift Secrets
          command: |
            oc create secret docker-registry quay-auth \
              --docker-password="${DOCKER_PASSWORD}" \
              --docker-username="${DOCKER_USERNAME}" \
              --docker-server="${DOCKER_REGISTRY}"
  build-amp:
    steps:
      - run:
          name: Build images
          no_output_timeout: 30m
          command: |
            set -o errexit
            oc new-app -f pkg/3scale/amp/auto-generated-templates/amp/amp-eval.yml \
              --param AMP_BACKEND_IMAGE=quay.io/3scale/apisonator:nightly \
              --param AMP_ZYNC_IMAGE=quay.io/3scale/zync:nightly \
              --param AMP_APICAST_IMAGE=quay.io/3scale/apicast:nightly \
              --param AMP_SYSTEM_IMAGE=quay.io/3scale/porta:nightly \
              -o json --param WILDCARD_DOMAIN=lvh/me --param AMP_RELEASE=master | \
              jq -j '.items[] | select(.kind == "ImageStream")' | \
              oc create -f -
            oc new-app -f pkg/3scale/amp/manual-templates/amp/build.yml --allow-missing-imagestream-tags
            until (oc get is s2i-openresty-centos7 -o json || echo '{}') | jq '[.status.tags[] | select(.tag == "builder")] | length == 1' --exit-status; do
              echo "wating for s2i-openresty-centos7:builder imagestream"
              sleep 1
            done
            for bc in $(oc get bc --output=name); do oc start-build $bc --wait --follow; done
            echo "Finished waiting for the processes"
            oc delete events --all
  oc-observe:
    steps:
      - run:
          name: Observe OpenShift Pod changes
          command: |
            oc observe pods --maximum-errors=-1 --no-headers --object-env-var=OBJECT --type-env-var=TYPE -- jq -n --raw-output 'env.OBJECT | fromjson | "\(env.TYPE) \(.kind) \(.metadata.name) started at \(.status.startTime) (\(.status.phase)) \(.status.conditions // [] | map("\(.type): \(.status) @ \(.lastTransitionTime)") | join(", "))"'
          background: true

  watch-operator-pod-logs:
    steps:
      - run:
          name: Watch pod logs
          command: |
            while [[ $(oc get pods -l name=threescale-operator -n operator-test -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}') != "True" ]]; do
              echo "waiting for pod" && sleep 1
            done
            OPERATOR_POD=$(oc get pods -l name=threescale-operator -n operator-test -o 'jsonpath={..metadata.name}')
            echo "watching logs on $OPERATOR_POD"
            kubectl -n operator-test logs -f $OPERATOR_POD
          background: true

  oc-status:
    parameters:
      report_name:
        type: string
        default: "events"

    steps:
      - run:
          name: Collect OpenShift events and status
          command: |
            mkdir -p reports
            oc status
            oc get events -o json > reports/<< parameters.report_name >>.json
          when: always
      - store_artifacts:
          path: reports

  build-operator-image:
    steps:
      - checkout
      - install-operator-sdk
      - install-operator-dependencies
      - run:
          name: Build Operator
          command: |
              make build IMAGE=172.30.1.1:5000/openshift/3scale-operator VERSION=test

  unit-tests:
    steps:
      - checkout
      - run: make vendor
      - run:
          name: Run unit tests in pkg folder
          command: |
            make unit
jobs:
  install-operator:
    docker:
      - image: circleci/golang:1.12.5
    working_directory: /go/src/github.com/3scale/3scale-operator
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - build-operator-image
      - run:
          name: Sharing requirements to downstream job
          command: |
            mkdir -p /tmp/workspace/images
            docker save -o /tmp/workspace/images/3scaleoperator-image.tar 172.30.1.1:5000/openshift/3scale-operator:test
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - images/3scaleoperator-image.tar

  tag-operator-image-master:
    machine:
      image: circleci/classic:latest
      docker_layer_caching: true
    steps:
      - attach-workspace
      - run:
          name: Unpack docker image
          command: |
            docker load -i /tmp/workspace/images/3scaleoperator-image.tar
      - run:
          name: Tag image as master
          command: |
              docker tag 172.30.1.1:5000/openshift/3scale-operator:test quay.io/3scale/3scale-operator:master
      - docker-login
      - run:
          name: Push master image
          command: |
              docker push quay.io/3scale/3scale-operator:master
      - run:
          name: Tag image as latest
          command: |
            docker tag quay.io/3scale/3scale-operator:master quay.io/3scale/3scale-operator:latest
      - run:
          name: Push latest image
          command: |
              docker push quay.io/3scale/3scale-operator:latest

  tag-operator-image-release:
    machine:
      image: circleci/classic:latest
      docker_layer_caching: true
    steps:
      - attach-workspace
      - run:
          name: Unpack docker image
          command: |
            docker load -i /tmp/workspace/images/3scaleoperator-image.tar
      - run:
          name: Tag image as release ${CIRCLE_TAG}
          command: |
              docker tag 172.30.1.1:5000/openshift/3scale-operator:test quay.io/3scale/3scale-operator:${CIRCLE_TAG}
      - docker-login
      - run:
          name: Push ${CIRCLE_TAG} tag
          command: |
              docker push quay.io/3scale/3scale-operator:${CIRCLE_TAG}

  deploy_templates:
    machine:
      image: circleci/classic:latest
      docker_layer_caching: true
    resource_class: large
    steps:
      - checkout
      - install-openshift
      - deploy-3scale-eval-from-template
      - oc-status

  build-push-3scale-nightly-images:
    machine:
      image: circleci/classic:latest
      docker_layer_caching: true
    resource_class: large
    steps:
      - checkout
      - install-openshift
      - create-secrets
      - build-amp
      - oc-observe
      - deploy-3scale-eval-from-template-imagestreamsless
      - oc-status
      - push-3scale-images-to-quay

  run-unit-tests:
    docker:
      - image: circleci/golang:1.12.5
    working_directory: /go/src/github.com/3scale/3scale-operator
    steps:
      - unit-tests

  run-operator-e2e-test:
    machine:
      image: circleci/classic:latest
      docker_layer_caching: true
    resource_class: large
    working_directory: ~/go/src/github.com/3scale/3scale-operator
    steps:
      - attach-workspace
      - install-openshift
      - install-golang
      - install-operator-sdk
      - checkout
      - install-operator-dependencies
      - run:
          name: Unpack and push operator to internal registry
          command: |
            docker load -i /tmp/workspace/images/3scaleoperator-image.tar
            oc whoami -t | docker login --username developer --password-stdin 172.30.1.1:5000
            docker push 172.30.1.1:5000/openshift/3scale-operator:test
      - run:
          name: Change to new testing namespace
          command: |
            oc new-project operator-test
      - oc-observe
      - watch-operator-pod-logs
      - run:
          name: run E2E tests
          command: |
            make e2e-run IMAGE=172.30.1.1:5000/openshift/3scale-operator:test NAMESPACE=operator-test
          no_output_timeout: 30m
      - oc-status

  generator:
    docker:
      - image: circleci/golang:1.12.5
    working_directory: /go/src/github.com/3scale/3scale-operator
    steps:
      - checkout
      - run: make vendor
      - run: make clean test -j 2 --directory pkg/3scale/amp

  test-crds:
    docker:
      - image: circleci/golang:1.12.5
    working_directory: /go/src/github.com/3scale/3scale-operator
    steps:
      - checkout
      - run: make vendor
      - run: make test-crds

  license-check:
    docker:
      - image: circleci/ruby:2.5
    steps:
      - install-golang
      - checkout
      - run: sudo gem install license_finder --version 5.7.1
      - run: make licenses-check

  unit-tests-coverage:
    docker:
      - image: circleci/golang:1.12.5
    working_directory: /go/src/github.com/3scale/3scale-operator
    steps:
      - unit-tests
      - run:
          name: Report to Codecov
          command: |
            cp _output/unit.cov coverage.txt
            bash <(curl -s https://codecov.io/bash)

workflows:
  version: 2
  operator:
    jobs:
      - license-check
      - test-crds
      - run-unit-tests
      - install-operator
      - run-operator-e2e-test:
          requires:
            - install-operator
      - unit-tests-coverage:
          requires:
            - run-unit-tests
          <<: *only-master-filter
  templates:
    jobs:
      - generator
      - deploy_templates:
          requires:
            - generator
  nightly:
    jobs:
      - build-push-3scale-nightly-images:
          context: org-global
      - deploy_templates:
          requires:
            - build-push-3scale-nightly-images
      - install-operator
      - run-operator-e2e-test:
          requires:
            - install-operator
            - build-push-3scale-nightly-images
    <<: *nightly-trigger
  operator-release:
    jobs:
      - install-operator:
          filters:
            <<: *tag-trigger
      - tag-operator-image-master:
          context: org-global
          requires:
            - install-operator
          filters:
            branches:
              only: master
      - tag-operator-image-release:
          context: org-global
          requires:
            - install-operator
          filters:
            <<: *tag-trigger
            branches:
              ignore: /.*/
