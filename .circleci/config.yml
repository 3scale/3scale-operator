version: 2.1

commands:
  install-operator-sdk:
    steps:
      - run:
          name: Install operator-sdk
          command: |
            mkdir -p ${GOPATH}/src/github.com/operator-framework
            cd ${GOPATH}/src/github.com/operator-framework
            git clone https://github.com/operator-framework/operator-sdk
            cd operator-sdk
            git checkout 99ae4aed7387dcfdc07ecf6169cf35b7bca47924
            make dep
            make install

  install-operator-dependencies:
    steps:
      - run:
          name: Install operator dependencies
          command: |
            make vendor

  install-openshift:
    steps:
      - run:
          name: Install OpenShift Client Tools
          working_directory: /tmp
          command: |
            curl --fail -L  https://github.com/openshift/origin/releases/download/v3.11.0/openshift-origin-client-tools-v3.11.0-0cbc58b-linux-64bit.tar.gz | tar -xzf-
            sudo mv /tmp/openshift-origin-client-tools-*-linux-64bit/oc /usr/local/bin/
            sudo mv /tmp/openshift-origin-client-tools-*-linux-64bit/kubectl /usr/local/bin/
      - run:
          name: Configure Docker
          command: |
            echo '{"insecure-registries": ["172.30.0.0/16"]}' | sudo tee --append /etc/docker/daemon.json
            sudo service docker restart

      - run:
          name: Get docker host IP
          command: |
            echo "export DOCKER_HOST_IP=$(docker run --net=host codenvy/che-ip)" >> $BASH_ENV

      - run:
          name: Start and Configure OpenShift Cluster
          working_directory: /tmp/openshift
          command: |
            oc cluster up --public-hostname=${DOCKER_HOST_IP} --enable=persistent-volumes \
              --enable=registry --enable=router
            oc login https://${DOCKER_HOST_IP}:8443 -u system:admin --insecure-skip-tls-verify=true > /dev/null
            oc adm policy add-cluster-role-to-user cluster-admin developer > /dev/null
            oc adm policy add-scc-to-group hostmount-anyuid system:serviceaccounts
            oc login https://${DOCKER_HOST_IP}:8443 -u developer --insecure-skip-tls-verify=true > /dev/null
            oc set env dc/router ROUTER_ALLOW_WILDCARD_ROUTES=true -n default

            oc wait --for=condition=available dc/docker-registry --namespace=default || oc rollout retry dc/docker-registry --namespace=default
            oc wait --for=condition=available dc/router --namespace=default || oc rollout retry dc/router --namespace=default

  install-golang:
    steps:
      - run:
          name: Setup GO env
          command: |
            mkdir -p ~/tmp
            echo 'export TMPDIR=~/tmp/' >> $BASH_ENV
            echo 'export GOROOT=/opt/go' >> $BASH_ENV
            echo 'export GOPATH=~/go' >> $BASH_ENV
            sudo mkdir -p /opt/go/bin
            mkdir -p ~/go/bin
            echo 'export PATH=$GOROOT/bin:$PATH' >> $BASH_ENV
            echo 'export PATH=$GOPATH/bin:$PATH' >> $BASH_ENV
      - run:
          name: Install Golang
          command: |
            curl --fail -L https://dl.google.com/go/go1.11.5.linux-amd64.tar.gz | sudo tar -C /opt -xzf-

  install-dep:
    steps:
      - run:
          name: Install Golang dep
          command: |
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sudo GOPATH=$GOPATH PATH=$GOROOT/bin:$PATH sh

  deploy-3scale-eval-from-template:
    steps:
      - run:
          name: Deploy 3scale
          command: |
            ruby -ryaml -rjson -e 'puts YAML.load(ARGF).tap{|t| t["objects"].reject!{|o| o["kind"]=="ImageStream"}}.to_json' pkg/3scale/amp/auto-generated-templates/amp/amp-eval.yml | \
              oc new-app -f- --param WILDCARD_DOMAIN=lvh.me --param AMP_RELEASE=master
            oc wait --for=condition=available --timeout=-1s $(oc get dc --output=name)

            oc get events | egrep ' Failed ' || :
            oc get events -o json | jq '[.items[] | select(.reason == "Failed") | debug ] | length == 0'  --exit-status

  push-3scale-images-to-quay:
    steps:
      - run:
          name: Push images to quay.io
          command: |
            docker login -u="${DOCKER_USERNAME}" -p="${DOCKER_PASSWORD}" "${DOCKER_REGISTRY}"
            oc whoami --show-token | docker login -u $(oc whoami) --password-stdin 172.30.1.1:5000
            project=$(oc project -q)

            oc image mirror $(for component in apicast wildcard-router zync ; do
              echo 172.30.1.1:5000/$project/amp-$component:latest=quay.io/3scale/$component:nightly
            done) 172.30.1.1:5000/$project/amp-backend:latest=quay.io/3scale/apisonator:nightly \
            172.30.1.1:5000/$project/amp-system:latest=quay.io/3scale/porta:nightly --insecure

  create-secrets:
    steps:
      - run:
          name: Import OpenShift Secrets
          command: |
            oc create secret docker-registry quay-auth \
              --docker-password="${DOCKER_PASSWORD}" \
              --docker-username="${DOCKER_USERNAME}" \
              --docker-server="${DOCKER_REGISTRY}"
  build-amp:
    steps:
      - run:
          name: Build images
          command: |
            oc new-app -f pkg/3scale/amp/auto-generated-templates/amp/amp-eval.yml -o json --param WILDCARD_DOMAIN=lvh/me --param AMP_RELEASE=master | jq -j '.items[] | select(.kind == "ImageStream")' | oc create -f -

            oc new-app -f pkg/3scale/amp/manual-templates/amp/build.yml --allow-missing-imagestream-tags
            set -x
            oc cancel-build $(oc get bc --output=name)
            for bc in $(oc get bc --output=name); do oc start-build $bc --wait --follow & done
            wait
            oc delete events --all
  oc-observe:
    steps:
      - run:
          name: Observe OpenShift Pod changes
          command: |
            oc observe pods --maximum-errors=-1 --no-headers --object-env-var=OBJECT --type-env-var=TYPE -- jq -n --raw-output 'env.OBJECT | fromjson | "\(env.TYPE) \(.kind) \(.metadata.name) started at \(.status.startTime) (\(.status.phase)) \(.status.conditions // [] | map("\(.type): \(.status) @ \(.lastTransitionTime)") | join(", "))"'
          background: true
  oc-status:
    parameters:
      report_name:
        type: string
        default: "events"

    steps:
      - run:
          name: Collect OpenShift events and status
          command: |
            mkdir -p reports
            oc status
            oc get events -o json > reports/<< parameters.report_name >>.json
          when: always
      - store_artifacts:
          path: reports

jobs:
  build-operator:
    docker:
      - image: circleci/golang:1.11
    working_directory: /go/src/github.com/3scale/3scale-operator
    steps:
      - setup_remote_docker:
          reusable: true
          exclusive: false

      - checkout

      - restore_cache:
          keys:
            - v1-gopkg-cache-{{ arch }}-{{ checksum "Gopkg.lock" }}
            - v1-gopkg-cache-{{ arch }}-{{ .Branch }}

      - install-operator-sdk
      - install-operator-dependencies

      - save_cache:
          key: v1-gopkg-cache-{{ arch }}-{{ checksum "Gopkg.lock" }}
          paths:
            - "/go/pkg"

      - run:
          name: Build Operator
          command: |
              make build VERSION=${CIRCLE_SHA1}

      - run:
          name: Push 3scale-operator image
          command: |
            docker login -u="${DOCKER_USERNAME}" -p="${DOCKER_PASSWORD}" "${DOCKER_REGISTRY}"
            make push VERSION=${CIRCLE_SHA1}

  deploy_templates:
    machine:
      docker_layer_caching: true
    resource_class: large
    steps:
      - checkout
      - install-openshift
      - create-secrets
      - build-amp
      - oc-observe
      - deploy-3scale-eval-from-template
      - oc-status

  deploy:
    machine:
      docker_layer_caching: true
    resource_class: large
    steps:
      - checkout
      - install-openshift
      - create-secrets
      - build-amp
      - oc-observe
      - deploy-3scale-eval-from-template
      - oc-status
      - push-3scale-images-to-quay

  run-operator-e2e-test:
    machine:
      enabled: true
    resource_class: large
    working_directory: ~/go/src/github.com/3scale/3scale-operator
    steps:
      - install-openshift
      - install-golang
      - install-dep
      - install-operator-sdk
      - checkout
      - install-operator-dependencies
      - run:
          name: Update the operator image
          command: |
            sed "s@REPLACE_IMAGE@quay.io/3scale/3scale-operator:${CIRCLE_SHA1}@g" -i deploy/operator.yaml
      - run:
          name: run E2E tests
          command: |
            make e2e-run
          no_output_timeout: 1800

  generator:
    docker:
      - image: circleci/golang:1.11
    working_directory: /go/src/github.com/3scale/3scale-operator
    steps:
      - checkout
      - run: dep ensure
      - run: make clean test -j 2 --directory pkg/3scale/amp
workflows:
  version: 2
  operator:
    jobs:
      - build-operator:
          context: org-global
      - run-operator-e2e-test:
          context: org-global
          requires:
            - build-operator

  templates:
    jobs:
      - generator
      - deploy_templates:
          context: org-global
          requires:
            - generator
  nightly:
    jobs:
      - deploy:
          context: org-global
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
